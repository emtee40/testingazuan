/**
 SpagoBI, the Open Source Business Intelligence suite

 Copyright (C) 2012 Engineering Ingegneria Informatica S.p.A. - SpagoBI Competency Center
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this file,
 You can obtain one at http://mozilla.org/MPL/2.0/.
 
**/
package it.eng.spagobi.meta.model.olap.provider;

import it.eng.spagobi.meta.model.olap.util.OlapModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OlapModelItemProviderAdapterFactory extends OlapModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OlapModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.OlapModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OlapModelItemProvider olapModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.OlapModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOlapModelAdapter() {
		if (olapModelItemProvider == null) {
			olapModelItemProvider = new OlapModelItemProvider(this);
		}

		return olapModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.Cube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CubeItemProvider cubeItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.Cube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCubeAdapter() {
		if (cubeItemProvider == null) {
			cubeItemProvider = new CubeItemProvider(this);
		}

		return cubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.Hierarchy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HierarchyItemProvider hierarchyItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.Hierarchy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHierarchyAdapter() {
		if (hierarchyItemProvider == null) {
			hierarchyItemProvider = new HierarchyItemProvider(this);
		}

		return hierarchyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.Level} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LevelItemProvider levelItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.Level}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLevelAdapter() {
		if (levelItemProvider == null) {
			levelItemProvider = new LevelItemProvider(this);
		}

		return levelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.Measure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureItemProvider measureItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.Measure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAdapter() {
		if (measureItemProvider == null) {
			measureItemProvider = new MeasureItemProvider(this);
		}

		return measureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.CalculatedMember} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalculatedMemberItemProvider calculatedMemberItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.CalculatedMember}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalculatedMemberAdapter() {
		if (calculatedMemberItemProvider == null) {
			calculatedMemberItemProvider = new CalculatedMemberItemProvider(this);
		}

		return calculatedMemberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.NamedSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedSetItemProvider namedSetItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.NamedSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedSetAdapter() {
		if (namedSetItemProvider == null) {
			namedSetItemProvider = new NamedSetItemProvider(this);
		}

		return namedSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.VirtualCube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualCubeItemProvider virtualCubeItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.VirtualCube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualCubeAdapter() {
		if (virtualCubeItemProvider == null) {
			virtualCubeItemProvider = new VirtualCubeItemProvider(this);
		}

		return virtualCubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.VirtualCubeDimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualCubeDimensionItemProvider virtualCubeDimensionItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.VirtualCubeDimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualCubeDimensionAdapter() {
		if (virtualCubeDimensionItemProvider == null) {
			virtualCubeDimensionItemProvider = new VirtualCubeDimensionItemProvider(this);
		}

		return virtualCubeDimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.olap.VirtualCubeMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualCubeMeasureItemProvider virtualCubeMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.olap.VirtualCubeMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualCubeMeasureAdapter() {
		if (virtualCubeMeasureItemProvider == null) {
			virtualCubeMeasureItemProvider = new VirtualCubeMeasureItemProvider(this);
		}

		return virtualCubeMeasureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (olapModelItemProvider != null) olapModelItemProvider.dispose();
		if (cubeItemProvider != null) cubeItemProvider.dispose();
		if (dimensionItemProvider != null) dimensionItemProvider.dispose();
		if (hierarchyItemProvider != null) hierarchyItemProvider.dispose();
		if (levelItemProvider != null) levelItemProvider.dispose();
		if (measureItemProvider != null) measureItemProvider.dispose();
		if (calculatedMemberItemProvider != null) calculatedMemberItemProvider.dispose();
		if (namedSetItemProvider != null) namedSetItemProvider.dispose();
		if (virtualCubeItemProvider != null) virtualCubeItemProvider.dispose();
		if (virtualCubeDimensionItemProvider != null) virtualCubeDimensionItemProvider.dispose();
		if (virtualCubeMeasureItemProvider != null) virtualCubeMeasureItemProvider.dispose();
	}

}
