#!/usr/bin/perl

=head1 
Process , version , status .
Author: 
Purpose: 

=cut




my $_licence = <<'END_OF_LICENCE';

  Copyright (c) 2005-2006, Talend SA

  This source code has been automatically generated by talend
  OpenStudio / ProcessDesigner (CodeGenerator version 1.1.1._r1413).
  You can find more information about talend products at www.talend.com.
  You may distribute this code under the terms of either the GNU General
  Public License or under the Artistic License just like Perl itself.

END_OF_LICENCE

# print $_licence;

use Getopt::Long;
use Time::HiRes qw/gettimeofday tv_interval/;
my %opt = ();
GetOptions(
    \%opt,
    qw/context=s stat_port=i trace_port=i watch/
);

our %_context;
our %_globals;

$_globals{job_name} = 'tDBOutput';
$_globals{start} = [gettimeofday];

if (defined $opt{context}) {
#     print(
#         'tsInfo>  Running process with context: ',
#         $opt{context},
#         ' (./tUser/parameters_', $opt{context}, '.pl)',
#         "\n\n"
#     );

    require $opt{context};
}

use TALENDDEMOS__demo;
use TALENDDEMOS__Date;
use TALENDDEMOS__Misc;
use TALENDDEMOS__String;


use constant true   => 1;
use constant false  => 0;
use constant null   => undef;

$SIG{__DIE__} = \&global_die_catcher;
$current_component=undef;

sub global_die_catcher {
    if (defined $current_component) {
        my $dying_component = $current_component;

        our $_globals;

        my $exception = $_[0];
        chomp($exception);

        $_globals{$dying_component}{ERROR_MESSAGE}      = $exception;
        $_globals{$dying_component}{PERL_ERROR_MESSAGE} = $!;
        $_globals{$dying_component}{PERL_ERROR_CODE}    = int($!);

        if (defined &main::tCatcher_1_subprocess) {
            tCatcher_1_subprocess(
                type => 'Perl die',
                origin => $dying_component,
                priority => 100,
                error_message => $_globals{$dying_component}{ERROR_MESSAGE},
                perl_error_message => $_globals{$dying_component}{PERL_ERROR_MESSAGE},
                perl_error_code => $_globals{$dying_component}{PERL_ERROR_CODE},
            );
        }

        no strict 'refs';
        &{$dying_component.'_error'}();
    }
}
sub tRowGenerator_1_error() {
}
sub tDBOutput_1_error() {
    tMsgBox_1_subprocess();
}
sub tMsgBox_1_error() {
}

# +-------------------------------------------------------------------------+
# | [subprocess header] starts here                                         |
# +-------------------------------------------------------------------------+ 

	sub tRowGenerator_1_subprocess  {
# +-------------------------------------------------------------------------+
# | [subprocess header] stops here                                          |
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tDBOutput_1 begin ] start
# +-------------------------------------------------------------------------+ 

$current_component="tDBOutput_1";



=head1 tDBOutput tDBOutput_1

=cut

$_globals{tDBOutput_1}{OK} = false;




use DBI;
use talend::dbOp;

my %desc_tDBOutput_1 = (
    dbtype        => 'mysql',
    driver        => 'mysql',
    dbhost        => 'localhost',
    dbport        => '3306',
    dbname        => 'test',
    dbtable       => 'demotable',
    dbuser        => 'root',
    dbpass        => '',
    encoding      => 'ISO-8859-15',
    schema        => [
    	{
            name    => 'id',
            key     => true,
            type    => 'int',
            dbtype  => 'INT', # MYSQL
            len     => 11,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'name',
            key     => false,
            type    => 'String',
            dbtype  => 'VARCHAR', # MYSQL
            len     => 30,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'quantity',
            key     => false,
            type    => 'int',
            dbtype  => 'INT', # MYSQL
            len     => 4,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'flag',
            key     => false,
            type    => 'int',
            dbtype  => 'INT', # MYSQL
            len     => 1,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'creation',
            key     => false,
            type    => 'String',
            dbtype  => 'VARCHAR', # MYSQL
            len     => 10,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'delivery',
            key     => false,
            type    => 'String',
            dbtype  => 'VARCHAR', # MYSQL
            len     => 10,
            precision => 0,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'miaColonna',
            key     => false,
            type    => 'String',
            dbtype  => 'VARCHAR', # MYSQL
            len     => 10,
            precision => 0,
            null    => true,
            default => '',
            comment => '',
		},
	
    ]
);

my $nb_fields_tDBOutput_1 = scalar @{ $desc_tDBOutput_1{schema} };

my $action = 'DROP_CREATE_TABLE';

my ($create_table, $drop_create_table, $clear_table) = (0, 0, 0);

if ($action eq 'CREATE_TABLE') {
    $create_table = 1;
}
elsif ($action eq 'DROP_CREATE_TABLE') {
    $drop_create_table = 1;
}
elsif ($action eq 'CLEAR_TABLE') {
    $clear_table = 1;
}

my $create = 0;
my $drop = $drop_create_table;

if ($create_table or $drop_create_table) {
    $create = 1;
}


my $dbh_tDBOutput_1 = DBI->connect(
    getConnectionString(
        driver => $desc_tDBOutput_1{driver},
        dbname => $desc_tDBOutput_1{dbname},
        dbhost => $desc_tDBOutput_1{dbhost},
        dbport => $desc_tDBOutput_1{dbport},
    ),
    $desc_tDBOutput_1{dbuser},
    $desc_tDBOutput_1{dbpass},
    {
    }
)
    or die "can't connect to database";

my $sth_tDBOutput_1;
my $query;

if ($desc_tDBOutput_1{dbtype} eq 'mysql'
    and lc $desc_tDBOutput_1{encoding} eq 'utf-8') {
    $query = '
set names "UTF8"
';
    $sth_tDBOutput_1 = $dbh_tDBOutput_1->prepare($query);
    $sth_tDBOutput_1->execute();
}

if ($desc_tDBOutput_1{dbtype} eq 'postgresql') {
    my $encoding = $desc_tDBOutput_1{encoding};

    $query = '
set names \''.$encoding.'\'
';
    $sth_tDBOutput_1 = $dbh_tDBOutput_1->prepare($query);
    $sth_tDBOutput_1->execute();
}

if ($create) {
    my $schema = '%';
    my $catalog = undef;

    if ($desc_tDBOutput_1{driver} eq 'oracle') {
        $schema = uc $desc_tDBOutput_1{dbuser};
    }

    my $tabsth = $dbh_tDBOutput_1->table_info($catalog, $schema);
    my @tables = ();

    while (my($qual, $owner, $table, $type) = $tabsth->fetchrow_array()) {
        push @tables, lc($table);
    }

#     print "===\n";
#     print "existing tables:\n";
#     print join("\n", map {"  - ".$_} @tables), "\n";
#     print "===\n";

    # if table already exists
    my $test_table = lc $desc_tDBOutput_1{dbtable};
    my $table_exists = grep /^$test_table$/, @tables;

    if ($drop and $table_exists) {
        # we have to drop the table
        $query = '
DROP TABLE '.$desc_tDBOutput_1{dbtable}.'
';
        $sth_tDBOutput_1 = $dbh_tDBOutput_1->prepare($query);

        $sth_tDBOutput_1->execute()
            or die "can't drop table";

        # the table does not exist anymore
        $table_exists = 0;
    }

    if (not $table_exists) {
        # now we create the table
        $query = getTableCreationQuery(
            tablename  => $desc_tDBOutput_1{dbtable},
            schema     => $desc_tDBOutput_1{schema},
            dbtype     => mysql,
        );
        
        $sth_tDBOutput_1 = $dbh_tDBOutput_1->prepare(
            $query
        );

        $sth_tDBOutput_1->execute()
            or die "can't create table";
    }
    else {
        warn(
            sprintf(
                'table "%s" already exists'."\n",
                $desc_tDBOutput_1{dbtable}
            )
        );
    }
}

if ($clear_table) {
    $query = '
DELETE
  FROM '.$desc_tDBOutput_1{dbtable}.'
';

    $sth_tDBOutput_1 = $dbh_tDBOutput_1->prepare($query);

    $sth_tDBOutput_1->execute()
        or die "can't clear table";
}

my @colnames = map { $_->{name} } @{ $desc_tDBOutput_1{schema} };
my $query = '';


$query = '
INSERT
  INTO '.$desc_tDBOutput_1{dbtable}.'
  ('.join(',', @colnames).')
  VALUES
  ('.join(',', map {'?'} (1 .. scalar @colnames)).')
';

my $isth_tDBOutput_1 = $dbh_tDBOutput_1->prepare($query);


my $nb_line_tDBOutput_1 = 0;
my $nb_line_updated_tDBOutput_1  = 0;
my $nb_line_inserted_tDBOutput_1 = 0;
my $nb_line_deleted_tDBOutput_1  = 0;



# +-------------------------------------------------------------------------+
# | [tDBOutput_1 begin ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 begin ] start
# +-------------------------------------------------------------------------+ 

$current_component="tRowGenerator_1";



=head1 tRowGenerator tRowGenerator_1

=cut

$_globals{tRowGenerator_1}{OK} = false;




my %desc_tRowGenerator_1 = (
    nb_rows       => '1000',
    schema        => [
    	{
            name    => 'id',
            key     => true,
            type    => '',
            len     => 11,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'name',
            key     => false,
            type    => '',
            len     => 30,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'quantity',
            key     => false,
            type    => '',
            len     => 4,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'flag',
            key     => false,
            type    => '',
            len     => 1,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'creation',
            key     => false,
            type    => '',
            len     => 10,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'delivery',
            key     => false,
            type    => '',
            len     => 10,
            null    => false,
            default => '',
            comment => '',
		},
	
    	{
            name    => 'miaColonna',
            key     => false,
            type    => '',
            len     => 10,
            null    => true,
            default => '',
            comment => '',
		},
	
    ],
    values => [
        [sub{$i++}],
        [sub{'label '.$i}],
        [1..1000],
        [0,1],
        [sub{getDate('CCYY-MM-DD')}],
        [sub{getRandomDate(min=>'2006-12-01',max=>getDate('CCYY-MM-DD'))}],
        [$_context{parametro}],
    ],
);


$_globals{tRowGenerator_1}{NB_LINE} = $desc_tRowGenerator_1{nb_rows};

for (1..$desc_tRowGenerator_1{nb_rows}) {


    my @tRowGenerator_1 = ();

    foreach my $values_aref (@{ $desc_tRowGenerator_1{values} }) {
        my $value;
        my $index = int rand scalar @$values_aref;

        if (ref $values_aref->[$index] eq 'CODE') {
            $value = &{ $values_aref->[$index] };
        }
        else {
            $value = $values_aref->[$index];
        }

        push(
            @tRowGenerator_1,
            $value
        )
    }


# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 begin ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 main ] start
# +-------------------------------------------------------------------------+ 

$current_component="tRowGenerator_1";




my @row1 = @tRowGenerator_1;

# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 main ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tDBOutput_1 main ] start
# +-------------------------------------------------------------------------+ 

$current_component="tDBOutput_1";


	my @tDBOutput_1 = @row1;


# keyPositionsString : 
# positionsString    : 

if (@tDBOutput_1) {
    my $nb_rows = 0;


    $isth_tDBOutput_1->execute(@tDBOutput_1[0 .. $nb_fields_tDBOutput_1 - 1])
        or die "can't execute insert query\n";

    $nb_line_inserted_tDBOutput_1++;

    my $new_nb_line_tDBOutput_1 =
        $nb_line_updated_tDBOutput_1
        + $nb_line_inserted_tDBOutput_1
        + $nb_line_deleted_tDBOutput_1
    ;
  
    $nb_line_tDBOutput_1 = $new_nb_line_tDBOutput_1;
}


# +-------------------------------------------------------------------------+
# | [tDBOutput_1 main ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [                                                                       |
# +-------------------------------------------------------------------------+ 

# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 end ] start
# +-------------------------------------------------------------------------+ 

$current_component="tRowGenerator_1";




}




$_globals{tRowGenerator_1}{OK} = true;


# +-------------------------------------------------------------------------+
# | [tRowGenerator_1 end ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tDBOutput_1 end ] start
# +-------------------------------------------------------------------------+ 

$current_component="tDBOutput_1";




$dbh_tDBOutput_1->disconnect();

$_globals{tDBOutput_1}{NB_LINE} = $nb_line_tDBOutput_1;
$_globals{tDBOutput_1}{NB_LINE_UPDATED}  = $nb_line_updated_tDBOutput_1;
$_globals{tDBOutput_1}{NB_LINE_INSERTED} = $nb_line_inserted_tDBOutput_1;
$_globals{tDBOutput_1}{NB_LINE_DELETED}  = $nb_line_deleted_tDBOutput_1;



$_globals{tDBOutput_1}{OK} = true;


# +-------------------------------------------------------------------------+
# | [tDBOutput_1 end ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [subprocess footer] starts here                                         |
# +-------------------------------------------------------------------------+ 
	}
# +-------------------------------------------------------------------------+
# | [subprocess footer] stops here                                          |
# +-------------------------------------------------------------------------+ 

# +-------------------------------------------------------------------------+
# | [subprocess header] starts here                                         |
# +-------------------------------------------------------------------------+ 

	sub tMsgBox_1_subprocess  {
# +-------------------------------------------------------------------------+
# | [subprocess header] stops here                                          |
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tMsgBox_1 begin ] start
# +-------------------------------------------------------------------------+ 

$current_component="tMsgBox_1";



=head1 tMsgBox tMsgBox_1

=cut

$_globals{tMsgBox_1}{OK} = false;





# +-------------------------------------------------------------------------+
# | [tMsgBox_1 begin ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [tMsgBox_1 main ] start
# +-------------------------------------------------------------------------+ 

$current_component="tMsgBox_1";




my $title = 'Talend Open Studio';
if ($title eq '') {
    $title = 'Default message';
}

if (eval "require Win32") {
    Win32::MsgBox(
        'Cannot perform the database connection !'
."\nOn your left, expand the node Metadata/Db_Connections and edit demoConnection 0.1."
."\n\n## Technical message: ##\n\nERROR_MESSAGE: "
.$_globals{tDBInput_1}{ERROR_MESSAGE}
."\n\nPERL_ERROR_MESSAGE: "
.$_globals{tDBInput_1}{PERL_ERROR_MESSAGE}
,
        Win32::MB_ICONINFORMATION | 0,
        $title
    );
}
elsif (eval "require Text::ASCIITable") {
    my $t = Text::ASCIITable->new();
    $t->setCols($title);
    $t->alignColName($title, 'center');
    $t->setColWidth($title,80);
    $t->addRow('Cannot perform the database connection !'
."\nOn your left, expand the node Metadata/Db_Connections and edit demoConnection 0.1."
."\n\n## Technical message: ##\n\nERROR_MESSAGE: "
.$_globals{tDBInput_1}{ERROR_MESSAGE}
."\n\nPERL_ERROR_MESSAGE: "
.$_globals{tDBInput_1}{PERL_ERROR_MESSAGE}
);
    $t->addRowLine();
    print $t;
}
else {
    print "\n";
    print "=========== ", $title, " ============\n";
    print 'Cannot perform the database connection !'
."\nOn your left, expand the node Metadata/Db_Connections and edit demoConnection 0.1."
."\n\n## Technical message: ##\n\nERROR_MESSAGE: "
.$_globals{tDBInput_1}{ERROR_MESSAGE}
."\n\nPERL_ERROR_MESSAGE: "
.$_globals{tDBInput_1}{PERL_ERROR_MESSAGE}
, "\n";
    print "===========", "=" x (length($title) + 2), "============\n";
}


# +-------------------------------------------------------------------------+
# | [tMsgBox_1 main ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [                                                                       |
# +-------------------------------------------------------------------------+ 

# +-------------------------------------------------------------------------+
# | [tMsgBox_1 end ] start
# +-------------------------------------------------------------------------+ 

$current_component="tMsgBox_1";




$_globals{tMsgBox_1}{OK} = true;


# +-------------------------------------------------------------------------+
# | [tMsgBox_1 end ] stop
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
# | [subprocess footer] starts here                                         |
# +-------------------------------------------------------------------------+ 
	}
# +-------------------------------------------------------------------------+
# | [subprocess footer] stops here                                          |
# +-------------------------------------------------------------------------+ 

# +-------------------------------------------------------------------------+
# | [footer] starts here                                                    |
# +-------------------------------------------------------------------------+ 



tRowGenerator_1_subprocess();


$_globals{stop} = [gettimeofday];

$_globals{duration} = sprintf(
    '%.1f', 
    tv_interval(
        $_globals{start},
        $_globals{stop}
    )
);


if (defined $opt{watch}) {
    printf(
        "===\nexecution time: %s seconds\n===\n",
        $_globals{duration}
    );
}

# +-------------------------------------------------------------------------+
# | [footer] stops here                                                     |
# +-------------------------------------------------------------------------+ 
# +-------------------------------------------------------------------------+
#      21067 characters generated by Talend OpenStudio 
#      on the 9 febbraio 2007 9.47.35 CET
# +-------------------------------------------------------------------------+