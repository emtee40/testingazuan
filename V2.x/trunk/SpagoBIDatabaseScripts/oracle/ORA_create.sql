/*
CREATED		12/05/2008
MODIFIED		12/05/2008
PROJECT		
MODEL		
COMPANY		
AUTHOR		
VERSION		
DATABASE		ORACLE 10G 
*/


-- CREATE TYPES SECTION


-- CREATE TABLES SECTION


CREATE TABLE SBI_AUDIT (
	ID INTEGER NOT NULL ,
	USERNAME VARCHAR2 (40) NOT NULL ,
	USERGROUP VARCHAR2 (100),
	DOC_REF INTEGER,
	DOC_ID INTEGER,
	DOC_LABEL VARCHAR2 (20) NOT NULL ,
	DOC_NAME VARCHAR2 (40) NOT NULL ,
	DOC_TYPE VARCHAR2 (20) NOT NULL ,
	DOC_STATE VARCHAR2 (20) NOT NULL ,
	DOC_PARAMETERS VARCHAR2 (400),
	SUBOBJ_REF INTEGER,
	SUBOBJ_ID INTEGER,
	SUBOBJ_NAME VARCHAR2 (50),
	SUBOBJ_OWNER VARCHAR2 (50),
	SUBOBJ_ISPUBLIC SMALLINT,
	ENGINE_REF INTEGER,
	ENGINE_ID INTEGER,
	ENGINE_LABEL VARCHAR2 (20) NOT NULL ,
	ENGINE_NAME VARCHAR2 (40) NOT NULL ,
	ENGINE_TYPE VARCHAR2 (20) NOT NULL ,
	ENGINE_URL VARCHAR2 (400),
	ENGINE_DRIVER VARCHAR2 (400),
	ENGINE_CLASS VARCHAR2 (400),
	REQUEST_TIME TIMESTAMP(6) NOT NULL ,
	EXECUTION_START DATE,
	EXECUTION_END DATE,
	EXECUTION_TIME INTEGER,
	EXECUTION_STATE VARCHAR2 (20),
	ERROR SMALLINT,
	ERROR_MESSAGE VARCHAR2 (400),
	ERROR_CODE VARCHAR2 (20),
	EXECUTION_MODALITY VARCHAR2 (40),
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_BINARY_CONTENTS (
	BIN_ID INTEGER NOT NULL ,
	BIN_CONTENT BLOB NOT NULL ,
PRIMARY KEY (BIN_ID) 
) 
/

CREATE TABLE SBI_CHECKS (
	CHECK_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (20) NOT NULL ,
	VALUE_TYPE_CD VARCHAR2 (20) NOT NULL ,
	VALUE_TYPE_ID INTEGER NOT NULL ,
	VALUE_1 VARCHAR2 (400),
	VALUE_2 VARCHAR2 (400),
	NAME VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (CHECK_ID) 
) 
/

CREATE TABLE SBI_DATA_SET (
	DS_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (50) NOT NULL ,
	NAME VARCHAR2 (50) NOT NULL ,
	FILE_NAME VARCHAR2 (50),
	QUERY CLOB,
	ADRESS VARCHAR2 (250),
	EXECUTOR_CLASS VARCHAR2 (250),
	PARAMS VARCHAR2 (1000),
	DATA_SOURCE_ID INTEGER,
	OBJECT_TYPE VARCHAR2 (50),
	OPERATION VARCHAR2 (250),
PRIMARY KEY (DS_ID) 
) 
/

CREATE TABLE SBI_DATA_SOURCE (
	DS_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (50) NOT NULL ,
	JNDI VARCHAR2 (50),
	URL_CONNECTION VARCHAR2 (50),
	USERNAME VARCHAR2 (50),
	PWD VARCHAR2 (50),
	DRIVER VARCHAR2 (160),
	DIALECT_ID INTEGER NOT NULL ,
PRIMARY KEY (DS_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST (
	DL_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
PRIMARY KEY (DL_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST_USER (
	DLU_ID INTEGER NOT NULL ,
	LIST_ID INTEGER NOT NULL ,
	USER_ID VARCHAR2 (40) NOT NULL ,
	E_MAIL VARCHAR2 (70) NOT NULL ,
PRIMARY KEY (DLU_ID) 
) 
/

CREATE TABLE SBI_DIST_LIST_OBJECTS (
	REL_ID INTEGER NOT NULL ,
	DOC_ID INTEGER NOT NULL ,
	DL_ID INTEGER NOT NULL ,
	XML VARCHAR2 (4000) NOT NULL ,
PRIMARY KEY (REL_ID) 
) 
/

CREATE TABLE SBI_DOMAINS (
	VALUE_ID INTEGER NOT NULL ,
	VALUE_CD VARCHAR2 (20),
	VALUE_NM VARCHAR2 (40),
	DOMAIN_CD VARCHAR2 (20),
	DOMAIN_NM VARCHAR2 (40),
	VALUE_DS VARCHAR2 (160),
PRIMARY KEY (VALUE_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_BIN_TEMP (
	BIN_ID INTEGER NOT NULL ,
	PART_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (20),
	BIN_CONTENT BLOB NOT NULL ,
	TYPE VARCHAR2 (20) NOT NULL ,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (BIN_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_TEMP (
	PART_ID INTEGER NOT NULL ,
	WORKFLOW_PROCESS_ID DOUBLE PRECISION NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	PAGE_ID INTEGER NOT NULL ,
PRIMARY KEY (PART_ID) 
) 
/

CREATE TABLE SBI_DOSSIER_PRES (
	PRESENTATION_ID INTEGER NOT NULL ,
	WORKFLOW_PROCESS_ID DOUBLE PRECISION NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	PROG INTEGER,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	APPROVED SMALLINT,
PRIMARY KEY (PRESENTATION_ID) 
) 
/

CREATE TABLE SBI_ENGINES (
	ENGINE_ID INTEGER NOT NULL ,
	ENCRYPT SMALLINT,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	MAIN_URL VARCHAR2 (400),
	SECN_URL VARCHAR2 (400),
	OBJ_UPL_DIR VARCHAR2 (400),
	OBJ_USE_DIR VARCHAR2 (400),
	DRIVER_NM VARCHAR2 (400),
	LABEL VARCHAR2 (40) NOT NULL ,
	ENGINE_TYPE INTEGER NOT NULL ,
	CLASS_NM VARCHAR2 (400),
	BIOBJ_TYPE INTEGER NOT NULL ,
	DEFAULT_DS_ID INTEGER,
	USE_DATASOURCE SMALLINT DEFAULT 0,
	USE_DATASET SMALLINT DEFAULT 0,
PRIMARY KEY (ENGINE_ID) 
) 
/

CREATE TABLE SBI_EVENTS (
	ID INTEGER NOT NULL ,
	USER_EVENT VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_EVENTS_LOG (
	ID INTEGER NOT NULL ,
	USER_EVENT VARCHAR2 (40) NOT NULL ,
	EVENT_DATE DATE NOT NULL ,
	DESCR VARCHAR2 (1000) NOT NULL ,
	PARAMS VARCHAR2 (1000),
	HANDLER VARCHAR2 (400) DEFAULT 'IT.ENG.SPAGOBI.EVENTS.HANDLERS.DEFAULTEVENTPRESENTATIONHANDLER' NOT NULL ,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_EVENTS_ROLES (
	EVENT_ID INTEGER NOT NULL ,
	ROLE_ID INTEGER NOT NULL ,
PRIMARY KEY (EVENT_ID,ROLE_ID) 
) 
/

CREATE TABLE SBI_EXT_ROLES (
	EXT_ROLE_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (100),
	DESCR VARCHAR2 (160),
	CODE VARCHAR2 (20),
	ROLE_TYPE_CD VARCHAR2 (20) NOT NULL ,
	ROLE_TYPE_ID INTEGER NOT NULL ,
	SAVE_SUBOBJECTS	SMALLINT DEFAULT 1,
	SEE_SUBOBJECTS SMALLINT DEFAULT 1,
	SEE_VIEWPOINTS SMALLINT DEFAULT 1,
	SEE_SNAPSHOTS SMALLINT DEFAULT 1,
	SEE_NOTES SMALLINT DEFAULT 1,
	SEND_MAIL SMALLINT DEFAULT 1,
	SAVE_INTO_FOLDER SMALLINT DEFAULT 1,
	SAVE_REMEMBER_ME SMALLINT DEFAULT 1,
	SEE_METADATA SMALLINT DEFAULT 1,
PRIMARY KEY (EXT_ROLE_ID) 
) 
/

CREATE TABLE SBI_FUNC_ROLE (
	FUNCT_ID INTEGER NOT NULL ,
	STATE_ID INTEGER NOT NULL ,
	ROLE_ID INTEGER NOT NULL ,
	STATE_CD VARCHAR2 (20),
PRIMARY KEY (FUNCT_ID,STATE_ID,ROLE_ID) 
) 
/

CREATE TABLE SBI_FUNCTIONS (
	FUNCT_ID INTEGER NOT NULL ,
	FUNCT_TYPE_CD VARCHAR2 (20) NOT NULL ,
	PARENT_FUNCT_ID INTEGER,
	NAME VARCHAR2 (40),
	DESCR VARCHAR2 (160),
	PATH VARCHAR2 (400),
	CODE VARCHAR2 (20) NOT NULL ,
	PROG INTEGER NOT NULL ,
	FUNCT_TYPE_ID INTEGER NOT NULL ,
PRIMARY KEY (FUNCT_ID) 
) 
/

CREATE TABLE SBI_GEO_FEATURES (
	FEATURE_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	TYPE VARCHAR2 (40),
PRIMARY KEY (FEATURE_ID) 
) 
/

CREATE TABLE SBI_GEO_MAP_FEATURES (
	MAP_ID INTEGER NOT NULL ,
	FEATURE_ID INTEGER NOT NULL ,
	SVG_GROUP VARCHAR2 (40),
	VISIBLE_FLAG VARCHAR2 (1),
PRIMARY KEY (MAP_ID,FEATURE_ID) 
) 
/

CREATE TABLE SBI_GEO_MAPS (
	MAP_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	DESCR VARCHAR2 (160),
	URL VARCHAR2 (400) NOT NULL ,
	FORMAT VARCHAR2 (40),
PRIMARY KEY (MAP_ID) 
) 
/

CREATE TABLE SBI_LOV (
	LOV_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (20) NOT NULL ,
	INPUT_TYPE_CD VARCHAR2 (20) NOT NULL ,
	DEFAULT_VAL VARCHAR2 (40),
	LOV_PROVIDER VARCHAR2 (4000) ,
	INPUT_TYPE_ID INTEGER NOT NULL ,
	PROFILE_ATTR VARCHAR2 (20),
	NAME VARCHAR2 (40) NOT NULL ,
PRIMARY KEY (LOV_ID) 
) 
/


CREATE TABLE SBI_MENU (
		MENU_ID INTEGER NOT NULL,
		NAME VARCHAR2(50), 
		DESCR VARCHAR2(2000),
		PARENT_ID INTEGER, 
		BIOBJ_ID INTEGER,
		HOMEPAGE SMALLINT DEFAULT 0,
		VIEW_ICONS SMALLINT DEFAULT 0,
		HIDE_TOOLBAR SMALLINT DEFAULT 0, 
		HIDE_SLIDERS SMALLINT DEFAULT 0,
		STATIC_PAGE VARCHAR2(45),
		BIOBJ_PARAMETERS VARCHAR2(400) NULL,
		SUBOBJ_NAME VARCHAR2(50) NULL,
		SNAPSHOT_NAME VARCHAR2(50) NULL,
		SNAPSHOT_HISTORY INTEGER NULL,
PRIMARY KEY (MENU_ID)
)
/

CREATE TABLE SBI_MENU_ROLE (
       MENU_ID INTEGER NOT NULL, 
       EXT_ROLE_ID INTEGER NOT NULL,
PRIMARY KEY (MENU_ID, EXT_ROLE_ID)
)
/

CREATE TABLE SBI_OBJ_FUNC (
	BIOBJ_ID INTEGER NOT NULL ,
	FUNCT_ID INTEGER NOT NULL ,
	PROG INTEGER,
PRIMARY KEY (BIOBJ_ID,FUNCT_ID) 
) 
/

CREATE TABLE SBI_OBJ_PAR (
	OBJ_PAR_ID INTEGER NOT NULL ,
	PAR_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	LABEL VARCHAR2 (40) NOT NULL ,
	REQ_FL SMALLINT,
	MOD_FL SMALLINT,
	VIEW_FL SMALLINT,
	MULT_FL SMALLINT,
	PROG INTEGER NOT NULL ,
	PARURL_NM VARCHAR2 (20),
	PRIORITY INTEGER,
PRIMARY KEY (OBJ_PAR_ID) 
) 
/

CREATE TABLE SBI_OBJ_PARUSE (
	OBJ_PAR_ID INTEGER NOT NULL ,
	USE_ID INTEGER NOT NULL ,
	OBJ_PAR_FATHER_ID INTEGER NOT NULL ,
	FILTER_OPERATION VARCHAR2 (20) NOT NULL ,
	PROG INTEGER NOT NULL ,
	FILTER_COLUMN VARCHAR2 (30) NOT NULL ,
	PRE_CONDITION VARCHAR2 (10),
	POST_CONDITION VARCHAR2 (10),
	LOGIC_OPERATOR VARCHAR2 (10),
PRIMARY KEY (OBJ_PAR_ID,USE_ID,OBJ_PAR_FATHER_ID,FILTER_OPERATION) 
) 
/

CREATE TABLE SBI_OBJ_STATE (
	BIOBJ_ID INTEGER NOT NULL ,
	STATE_ID INTEGER NOT NULL ,
	START_DT DATE NOT NULL ,
	END_DT DATE,
	NOTE VARCHAR2 (300),
PRIMARY KEY (BIOBJ_ID,STATE_ID,START_DT) 
) 
/

CREATE TABLE SBI_OBJECT_NOTES (
	OBJ_NOTE_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	EXEC_REQ VARCHAR2 (500),
PRIMARY KEY (OBJ_NOTE_ID) 
) 
/

CREATE TABLE SBI_OBJECT_TEMPLATES (
	OBJ_TEMP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (50),
	PROG INTEGER,
	DIMENSION VARCHAR2 (20),
	CREATION_DATE DATE,
	CREATION_USER VARCHAR2 (45) NOT NULL ,
	ACTIVE SMALLINT,
PRIMARY KEY (OBJ_TEMP_ID) 
) 
/

CREATE TABLE SBI_OBJECTS (
	BIOBJ_ID INTEGER NOT NULL ,
	ENGINE_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LABEL VARCHAR2 (20) NOT NULL ,
	ENCRYPT SMALLINT,
	PATH VARCHAR2 (400),
	REL_NAME VARCHAR2 (400),
	STATE_ID INTEGER NOT NULL ,
	STATE_CD VARCHAR2 (20) NOT NULL ,
	BIOBJ_TYPE_CD VARCHAR2 (20) NOT NULL ,
	BIOBJ_TYPE_ID INTEGER NOT NULL ,
	SCHED_FL SMALLINT,
	EXEC_MODE_ID INTEGER,
	STATE_CONS_ID INTEGER,
	EXEC_MODE_CD VARCHAR2 (20),
	STATE_CONS_CD VARCHAR2 (20),
	NAME VARCHAR2 (40) NOT NULL ,
	VISIBLE SMALLINT NOT NULL ,
	UUID VARCHAR2 (40) NOT NULL ,
	DATA_SOURCE_ID INTEGER,
	DATA_SET_ID INTEGER,
	DESCR_EXT CLOB,
	OBJECTIVE CLOB,
	LANGUAGE VARCHAR2 (45),
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	CREATION_USER VARCHAR2 (45) NOT NULL ,
	KEYWORDS VARCHAR2(250),
	REFRESH_SECONDS INTEGER DEFAULT 0,
PRIMARY KEY (BIOBJ_ID) 
) 
/

CREATE TABLE SBI_OBJECTS_RATING (
	USER_ID VARCHAR2 (127) NOT NULL ,
	OBJ_ID INTEGER NOT NULL ,
	RATING INTEGER NOT NULL ,
PRIMARY KEY (USER_ID,OBJ_ID) 
) 
/

CREATE TABLE SBI_PARAMETERS (
	PAR_ID INTEGER NOT NULL ,
	DESCR VARCHAR2 (160),
	LENGTH SMALLINT NOT NULL ,
	LABEL VARCHAR2 (20) NOT NULL ,
	PAR_TYPE_CD VARCHAR2 (20) NOT NULL ,
	MASK VARCHAR2 (20),
	PAR_TYPE_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	FUNCTIONAL_FLAG SMALLINT DEFAULT 1 NOT NULL ,
PRIMARY KEY (PAR_ID) 
) 
/

CREATE TABLE SBI_PARUSE (
	USE_ID INTEGER NOT NULL ,
	LOV_ID INTEGER,
	LABEL VARCHAR2 (20) NOT NULL ,
	DESCR VARCHAR2 (160),
	PAR_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (40) NOT NULL ,
	MAN_IN INTEGER NOT NULL ,
	SELECTION_TYPE VARCHAR2 (20) DEFAULT 'LIST',
	MULTIVALUE_FLAG INTEGER DEFAULT 0,
PRIMARY KEY (USE_ID) 
) 
/

CREATE TABLE SBI_PARUSE_CK (
	USE_ID INTEGER NOT NULL ,
	CHECK_ID INTEGER NOT NULL ,
	PROG INTEGER,
PRIMARY KEY (USE_ID,CHECK_ID) 
) 
/

CREATE TABLE SBI_PARUSE_DET (
	USE_ID INTEGER NOT NULL ,
	EXT_ROLE_ID INTEGER NOT NULL ,
	PROG INTEGER,
	HIDDEN_FL SMALLINT,
	DEFAULT_VAL VARCHAR2 (40),
PRIMARY KEY (USE_ID,EXT_ROLE_ID) 
) 
/

CREATE TABLE SBI_REMEMBER_ME (
	ID INTEGER NOT NULL ,
	USERNAME VARCHAR2 (40) NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	SUBOBJ_ID INTEGER,
	PARAMETERS VARCHAR2 (400),
	NAME VARCHAR2 (50) NOT NULL ,
	DESCRIPTION CLOB,
PRIMARY KEY (ID) 
) 
/

CREATE TABLE SBI_ROLE_TYPE_USER_FUNC (
	ROLE_TYPE_ID INTEGER NOT NULL ,
	USER_FUNCT_ID INTEGER NOT NULL ,
PRIMARY KEY (ROLE_TYPE_ID,USER_FUNCT_ID) 
) 
/

CREATE TABLE SBI_SNAPSHOTS (
	SNAP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (50),
	DESCRIPTION VARCHAR2 (100),
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (SNAP_ID) 
) 
/

CREATE TABLE SBI_SUBOBJECTS (
	SUBOBJ_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	BIN_ID INTEGER,
	NAME VARCHAR2 (50),
	DESCRIPTION VARCHAR2 (100),
	OWNER VARCHAR2 (50),
	ISPUBLIC SMALLINT,
	CREATION_DATE TIMESTAMP(6) NOT NULL ,
	LAST_CHANGE_DATE TIMESTAMP(6) NOT NULL ,
PRIMARY KEY (SUBOBJ_ID) 
) 
/

CREATE TABLE SBI_SUBREPORTS (
	MASTER_RPT_ID INTEGER NOT NULL ,
	SUB_RPT_ID INTEGER NOT NULL ,
PRIMARY KEY (MASTER_RPT_ID,SUB_RPT_ID) 
) 
/

CREATE TABLE SBI_USER_FUNC (
	USER_FUNCT_ID INTEGER NOT NULL ,
	NAME VARCHAR2 (50),
	DESCRIPTION VARCHAR2 (100),
PRIMARY KEY (USER_FUNCT_ID) 
) 
/

CREATE TABLE SBI_VIEWPOINTS (
	VP_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL ,
	VP_NAME VARCHAR2 (40) NOT NULL ,
	VP_OWNER VARCHAR2 (40),
	VP_DESC VARCHAR2 (160),
	VP_SCOPE VARCHAR2 (20) NOT NULL ,
	VP_VALUE_PARAMS VARCHAR2 (400),
	VP_CREATION_DATE DATE NOT NULL ,
PRIMARY KEY (VP_ID) 
) 
/

COMMIT;

-- CREATE INDEXES SECTION

CREATE INDEX FK_SBI_AUDIT_1 ON SBI_AUDIT (DOC_REF) 
/
CREATE INDEX FK_SBI_AUDIT_2 ON SBI_AUDIT (ENGINE_REF) 
/
CREATE INDEX FK_SBI_AUDIT_3 ON SBI_AUDIT (SUBOBJ_REF) 
/
CREATE INDEX XIF3SBI_CHECKS ON SBI_CHECKS (VALUE_TYPE_ID) 
/
CREATE INDEX FK_SBI_DATA_SOURCE_1 ON SBI_DATA_SOURCE (DIALECT_ID) 
/
CREATE INDEX FK_SBI_DISTRIBUTION_LISTS_OBJE ON SBI_DIST_LIST_OBJECTS (DOC_ID) 
/
CREATE INDEX FK_SBI_DISTRIBUTION_LISTS_DLID ON SBI_DIST_LIST_OBJECTS (DL_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_BINARY_CONTENTS ON SBI_DOSSIER_BIN_TEMP (PART_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_TEMP_1 ON SBI_DOSSIER_TEMP (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_PRES_1 ON SBI_DOSSIER_PRES (BIN_ID) 
/
CREATE INDEX FK_SBI_DOSSIER_PRES_2 ON SBI_DOSSIER_PRES (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_ENGINES_1 ON SBI_ENGINES (BIOBJ_TYPE) 
/
CREATE INDEX FK_SBI_ENGINES_2 ON SBI_ENGINES (ENGINE_TYPE) 
/
CREATE INDEX FK_SBI_ENGINES_3 ON SBI_ENGINES (DEFAULT_DS_ID) 
/
CREATE INDEX FK_SBI_EVENTS_ROLES_1 ON SBI_EVENTS_ROLES (ROLE_ID) 
/
CREATE INDEX XIF1SBI_EXT_ROLES ON SBI_EXT_ROLES (ROLE_TYPE_ID) 
/
CREATE INDEX XIF1SBI_FUNC_ROLE ON SBI_FUNC_ROLE (ROLE_ID) 
/
CREATE INDEX XIF2SBI_FUNC_ROLE ON SBI_FUNC_ROLE (FUNCT_ID) 
/
CREATE INDEX XIF4SBI_FUNC_ROLE ON SBI_FUNC_ROLE (STATE_ID) 
/
CREATE INDEX XIF1SBI_FUNCTIONS ON SBI_FUNCTIONS (FUNCT_TYPE_ID) 
/
CREATE INDEX XIF2SBI_FUNCTIONS ON SBI_FUNCTIONS (PARENT_FUNCT_ID) 
/
CREATE INDEX FK_GEO_MAP_FEATURES2 ON SBI_GEO_MAP_FEATURES (FEATURE_ID) 
/
CREATE INDEX XIF3SBI_LOV ON SBI_LOV (INPUT_TYPE_ID) 
/
CREATE INDEX XIF3SBI_MENU ON SBI_MENU (MENU_ID) 
/
CREATE INDEX XIF1SBI_OBJ_FUNC ON SBI_OBJ_FUNC (BIOBJ_ID) 
/
CREATE INDEX XIF2SBI_OBJ_FUNC ON SBI_OBJ_FUNC (FUNCT_ID) 
/
CREATE INDEX XIF1SBI_OBJ_PAR ON SBI_OBJ_PAR (PAR_ID) 
/
CREATE INDEX XIF2SBI_OBJ_PAR ON SBI_OBJ_PAR (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_OBJ_PARUSE_2 ON SBI_OBJ_PARUSE (USE_ID) 
/
CREATE INDEX FK_SBI_OBJ_PARUSE_3 ON SBI_OBJ_PARUSE (OBJ_PAR_FATHER_ID) 
/
CREATE INDEX XIF3SBI_OBJ_STATE ON SBI_OBJ_STATE (BIOBJ_ID) 
/
CREATE INDEX XIF4SBI_OBJ_STATE ON SBI_OBJ_STATE (STATE_ID) 
/
CREATE INDEX FK_SBI_OBJECT_NOTES_1 ON SBI_OBJECT_NOTES (BIN_ID) 
/
CREATE INDEX FK_SBI_OBJECT_NOTES_2 ON SBI_OBJECT_NOTES (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_OBJECT_TEMPLATES_1 ON SBI_OBJECT_TEMPLATES (BIN_ID) 
/
CREATE INDEX FK_SBI_OBJECT_TEMPLATES_2 ON SBI_OBJECT_TEMPLATES (BIOBJ_ID) 
/
CREATE INDEX XIF2SBI_OBJECTS ON SBI_OBJECTS (STATE_ID) 
/
CREATE INDEX XIF4SBI_OBJECTS ON SBI_OBJECTS (BIOBJ_TYPE_ID) 
/
CREATE INDEX XIF5SBI_OBJECTS ON SBI_OBJECTS (EXEC_MODE_ID) 
/
CREATE INDEX XIF6SBI_OBJECTS ON SBI_OBJECTS (STATE_CONS_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_5 ON SBI_OBJECTS (ENGINE_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_6 ON SBI_OBJECTS (DATA_SOURCE_ID) 
/
CREATE INDEX FK_SBI_OBJECTS_RATING_1 ON SBI_OBJECTS_RATING (OBJ_ID) 
/
CREATE INDEX XIF1SBI_PARAMETERS ON SBI_PARAMETERS (PAR_TYPE_ID) 
/
CREATE INDEX XIF1SBI_PARUSE ON SBI_PARUSE (PAR_ID) 
/
CREATE INDEX XIF2SBI_PARUSE ON SBI_PARUSE (LOV_ID) 
/
CREATE INDEX XIF1SBI_PARUSE_CK ON SBI_PARUSE_CK (USE_ID) 
/
CREATE INDEX XIF2SBI_PARUSE_CK ON SBI_PARUSE_CK (CHECK_ID) 
/
CREATE INDEX XIF2SBI_PARUSE_DET ON SBI_PARUSE_DET (EXT_ROLE_ID) 
/
CREATE INDEX XIF3SBI_PARUSE_DET ON SBI_PARUSE_DET (USE_ID) 
/
CREATE INDEX FK_SBI_REMEMBER_ME_1 ON SBI_REMEMBER_ME (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_REMEMBER_ME_2 ON SBI_REMEMBER_ME (SUBOBJ_ID) 
/
CREATE INDEX FK_SBI_ROLE_TYPE_USER_FUNCTION ON SBI_ROLE_TYPE_USER_FUNC (USER_FUNCT_ID) 
/
CREATE INDEX FK_SBI_SNAPSHOTS_1 ON SBI_SNAPSHOTS (BIN_ID) 
/
CREATE INDEX FK_SBI_SNAPSHOTS_2 ON SBI_SNAPSHOTS (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_SUBOBJECTS_1 ON SBI_SUBOBJECTS (BIN_ID) 
/
CREATE INDEX FK_SBI_SUBOBJECTS_2 ON SBI_SUBOBJECTS (BIOBJ_ID) 
/
CREATE INDEX FK_SBI_SUBREPORTS_2 ON SBI_SUBREPORTS (SUB_RPT_ID) 
/
CREATE INDEX FK_SBI_VIEWPOINTS_1 ON SBI_VIEWPOINTS (BIOBJ_ID) 
/


-- CREATE FOREIGN KEYS SECTION

ALTER TABLE SBI_DOSSIER_PRES ADD  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_OBJECT_NOTES ADD  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_OBJECT_TEMPLATES ADD  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_SNAPSHOTS ADD  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_SUBOBJECTS ADD  FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID) 
/

ALTER TABLE SBI_PARUSE_CK ADD  FOREIGN KEY (CHECK_ID) REFERENCES SBI_CHECKS (CHECK_ID) 
/

ALTER TABLE SBI_ENGINES ADD  FOREIGN KEY (DEFAULT_DS_ID) REFERENCES SBI_DATA_SOURCE (DS_ID) 
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (DATA_SOURCE_ID) REFERENCES SBI_DATA_SOURCE (DS_ID) 
/

ALTER TABLE SBI_DIST_LIST_USER ADD  FOREIGN KEY (LIST_ID) REFERENCES SBI_DIST_LIST (DL_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_DIST_LIST_OBJECTS ADD  FOREIGN KEY (DL_ID) REFERENCES SBI_DIST_LIST (DL_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_CHECKS ADD  FOREIGN KEY (VALUE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_DATA_SOURCE ADD  FOREIGN KEY (DIALECT_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_ENGINES ADD  FOREIGN KEY (BIOBJ_TYPE) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_ENGINES ADD  FOREIGN KEY (ENGINE_TYPE) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_EXT_ROLES ADD  FOREIGN KEY (ROLE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_FUNC_ROLE ADD  FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_FUNCTIONS ADD  FOREIGN KEY (FUNCT_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_LOV ADD  FOREIGN KEY (INPUT_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJ_STATE ADD  FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (STATE_CONS_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (STATE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (BIOBJ_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (EXEC_MODE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_PARAMETERS ADD  FOREIGN KEY (PAR_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_ROLE_TYPE_USER_FUNC ADD  FOREIGN KEY (ROLE_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) 
/

ALTER TABLE SBI_DOSSIER_BIN_TEMP ADD  FOREIGN KEY (PART_ID) REFERENCES SBI_DOSSIER_TEMP (PART_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_AUDIT ADD  FOREIGN KEY (ENGINE_REF) REFERENCES SBI_ENGINES (ENGINE_ID)  ON DELETE SET NULL
/

ALTER TABLE SBI_OBJECTS ADD  FOREIGN KEY (ENGINE_ID) REFERENCES SBI_ENGINES (ENGINE_ID) 
/

ALTER TABLE SBI_EVENTS_ROLES ADD  FOREIGN KEY (EVENT_ID) REFERENCES SBI_EVENTS_LOG (ID) 
/

ALTER TABLE SBI_EVENTS_ROLES ADD  FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) 
/

ALTER TABLE SBI_FUNC_ROLE ADD  FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) 
/

ALTER TABLE SBI_PARUSE_DET ADD  FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) 
/

ALTER TABLE SBI_FUNC_ROLE ADD  FOREIGN KEY (FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/

ALTER TABLE SBI_FUNCTIONS ADD  FOREIGN KEY (PARENT_FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/

ALTER TABLE SBI_OBJ_FUNC ADD  FOREIGN KEY (FUNCT_ID) REFERENCES SBI_FUNCTIONS (FUNCT_ID) 
/

ALTER TABLE SBI_GEO_MAP_FEATURES ADD  FOREIGN KEY (FEATURE_ID) REFERENCES SBI_GEO_FEATURES (FEATURE_ID) 
/

ALTER TABLE SBI_GEO_MAP_FEATURES ADD  FOREIGN KEY (MAP_ID) REFERENCES SBI_GEO_MAPS (MAP_ID) 
/

ALTER TABLE SBI_PARUSE ADD  FOREIGN KEY (LOV_ID) REFERENCES SBI_LOV (LOV_ID) 
/

ALTER TABLE SBI_OBJ_PARUSE ADD  FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID) 
/

ALTER TABLE SBI_OBJ_PARUSE ADD  FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID) 
/

ALTER TABLE SBI_AUDIT ADD  FOREIGN KEY (DOC_REF) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE SET NULL
/

ALTER TABLE SBI_DIST_LIST_OBJECTS ADD  FOREIGN KEY (DOC_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_DOSSIER_TEMP ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_DOSSIER_PRES ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJ_FUNC ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJ_PAR ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJ_STATE ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECT_NOTES ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECT_TEMPLATES ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJECTS_RATING ADD  FOREIGN KEY (OBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_REMEMBER_ME ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_SNAPSHOTS ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_SUBOBJECTS ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_SUBREPORTS ADD  FOREIGN KEY (MASTER_RPT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_SUBREPORTS ADD  FOREIGN KEY (SUB_RPT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_VIEWPOINTS ADD  FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) 
/

ALTER TABLE SBI_OBJ_PAR ADD  FOREIGN KEY (PAR_ID) REFERENCES SBI_PARAMETERS (PAR_ID) 
/

ALTER TABLE SBI_PARUSE ADD  FOREIGN KEY (PAR_ID) REFERENCES SBI_PARAMETERS (PAR_ID) 
/

ALTER TABLE SBI_OBJ_PARUSE ADD  FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/

ALTER TABLE SBI_PARUSE_CK ADD  FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/

ALTER TABLE SBI_PARUSE_DET ADD  FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID) 
/

ALTER TABLE SBI_AUDIT ADD  FOREIGN KEY (SUBOBJ_REF) REFERENCES SBI_SUBOBJECTS (SUBOBJ_ID)  ON DELETE SET NULL
/

ALTER TABLE SBI_REMEMBER_ME ADD  FOREIGN KEY (SUBOBJ_ID) REFERENCES SBI_SUBOBJECTS (SUBOBJ_ID)  ON DELETE CASCADE
/

ALTER TABLE SBI_ROLE_TYPE_USER_FUNC ADD  FOREIGN KEY (USER_FUNCT_ID) REFERENCES SBI_USER_FUNC (USER_FUNCT_ID) 
/

ALTER TABLE SBI_MENU_ROLE ADD FOREIGN KEY (MENU_ID) REFERENCES SBI_MENU (MENU_ID) ON DELETE CASCADE
/

ALTER TABLE SBI_MENU_ROLE ADD FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE CASCADE
/

-- CREATE OBJECT TABLES SECTION


-- CREATE XMLTYPE TABLES SECTION


-- CREATE FUNCTIONS SECTION


-- CREATE SEQUENCES SECTION

--sequence on old tables (spagobi 1.9.x)
CREATE SEQUENCE SBI_CHECKS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOMAINS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_ENGINES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_EXT_ROLES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_FUNCTIONS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_LOV_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_MENU_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_PARAMETERS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_PARUSE_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJ_PAR_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_EVENTS_LOG_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_AUDIT_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

CREATE SEQUENCE SBI_VIEWPOINTS_SEQ
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

--sequence on new tables (spagobi 2)
CREATE SEQUENCE SBI_GEO_MAPS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_GEO_FEATURES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DATA_SOURCE_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_BINARY_CONTENTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECT_TEMPLATES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_OBJECT_NOTES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_SUBOBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_SNAPSHOTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_USER_FUNC_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_PRES_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_TEMP_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DOSSIER_BIN_TEMP_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_REMEMBER_ME_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DATA_SET_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_USER_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;
CREATE SEQUENCE SBI_DIST_LIST_OBJECTS_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

COMMIT;

--create trigger old tables (spagobi 1.9.x)
create trigger TRG_SBI_CHECKS
  BEFORE INSERT
  on SBI_CHECKS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.CHECK_ID IS NULL THEN
     select SBI_CHECKS_SEQ.nextval into nuovo_id from dual;
     :new.CHECK_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_DOMAINS
  BEFORE INSERT
  on SBI_DOMAINS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.VALUE_ID IS NULL THEN
     select SBI_DOMAINS_SEQ.nextval into nuovo_id from dual;
     :new.VALUE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_ENGINES
  BEFORE INSERT
  on SBI_ENGINES
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ENGINE_ID IS NULL THEN
     select SBI_ENGINES_SEQ.nextval into nuovo_id from dual;
     :new.ENGINE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_EXT_ROLES
  BEFORE INSERT
  on SBI_EXT_ROLES
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.EXT_ROLE_ID IS NULL THEN
     select SBI_EXT_ROLES_SEQ.nextval into nuovo_id from dual;
     :new.EXT_ROLE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_FUNCTIONS
  BEFORE INSERT
  on SBI_FUNCTIONS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.FUNCT_ID IS NULL THEN
     select SBI_FUNCTIONS_SEQ.nextval into nuovo_id from dual;
     :new.FUNCT_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_LOV
  BEFORE INSERT
  on SBI_LOV
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.LOV_ID IS NULL THEN
     select SBI_LOV_SEQ.nextval into nuovo_id from dual;
     :new.LOV_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_MENU
  BEFORE INSERT
  on SBI_MENU
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.MENU_ID IS NULL THEN
     select SBI_MENU_SEQ.nextval into nuovo_id from dual;
     :new.MENU_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_OBJECTS
  BEFORE INSERT
  on SBI_OBJECTS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.BIOBJ_ID IS NULL THEN
     select SBI_OBJECTS_SEQ.nextval into nuovo_id from dual;
     :new.BIOBJ_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_PARAMETERS
  BEFORE INSERT
  on SBI_PARAMETERS
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.PAR_ID IS NULL THEN
     select SBI_PARAMETERS_SEQ.nextval into nuovo_id from dual;
     :new.PAR_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_PARUSE
  BEFORE INSERT
  on SBI_PARUSE
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.USE_ID IS NULL THEN
     select SBI_PARUSE_SEQ.nextval into nuovo_id from dual;
     :new.USE_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_OBJ_PAR
  BEFORE INSERT
  on SBI_OBJ_PAR
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.OBJ_PAR_ID IS NULL THEN
     select SBI_OBJ_PAR_SEQ.nextval into nuovo_id from dual;
     :new.OBJ_PAR_ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_EVENTS_LOG
  BEFORE INSERT
  on SBI_EVENTS_LOG
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_EVENTS_LOG_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/

create trigger TRG_SBI_AUDIT
  BEFORE INSERT
  on SBI_AUDIT
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_AUDIT_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/


--create trigger new  tables (spagobi 2)
CREATE TRIGGER TRG_SBI_DIST_LIST_OBJECTS
  BEFORE INSERT
  ON SBI_DIST_LIST_OBJECTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DL_ID IS NULL THEN
     SELECT SBI_DIST_LIST_OBJECTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DL_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DIST_LIST_USER
  BEFORE INSERT
  ON SBI_DIST_LIST_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DLU_ID IS NULL THEN
     SELECT SBI_DIST_LIST_USER_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DLU_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DIST_LIST
  BEFORE INSERT
  ON SBI_DIST_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DL_ID IS NULL THEN
     SELECT SBI_DIST_LIST_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DL_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DATA_SET
  BEFORE INSERT
  ON SBI_DATA_SET
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DS_ID IS NULL THEN
     SELECT SBI_DATA_SET_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DS_ID:=NUOVO_ID;
END IF;
END;
/
CREATE TRIGGER TRG_SBI_REMEMBER_ME
  BEFORE INSERT
  ON SBI_REMEMBER_ME
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID IS NULL THEN
     SELECT SBI_REMEMBER_ME_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_BIN_TEMP
  BEFORE INSERT
  ON  SBI_DOSSIER_BIN_TEMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.BIN_ID IS NULL THEN
     SELECT SBI_DOSSIER_BIN_TEMP_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.BIN_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_TEMP
  BEFORE INSERT
  ON SBI_DOSSIER_TEMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.PART_ID IS NULL THEN
     SELECT SBI_DOSSIER_TEMP_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.PART_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DOSSIER_PRES
  BEFORE INSERT
  ON SBI_DOSSIER_PRES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.PRESENTATION_ID IS NULL THEN
     SELECT SBI_DOSSIER_PRES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.PRESENTATION_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_USER_FUNC
  BEFORE INSERT
  ON SBI_USER_FUNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.USER_FUNCT_ID IS NULL THEN
     SELECT SBI_USER_FUNC_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.USER_FUNCT_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_SNAPSHOTS
  BEFORE INSERT
  ON SBI_SNAPSHOTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.SNAP_ID IS NULL THEN
     SELECT SBI_SNAPSHOTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.SNAP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_SUBOBJECTS
  BEFORE INSERT
  ON SBI_SUBOBJECTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.SUBOBJ_ID IS NULL THEN
     SELECT SBI_SUBOBJECTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.SUBOBJ_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJECT_NOTES
  BEFORE INSERT
  ON SBI_OBJECT_NOTES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_NOTE_ID IS NULL THEN
     SELECT SBI_OBJECT_NOTES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_NOTE_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_OBJECT_TEMPLATES
  BEFORE INSERT
  ON SBI_OBJECT_TEMPLATES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.OBJ_TEMP_ID IS NULL THEN
     SELECT SBI_OBJECT_TEMPLATES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.OBJ_TEMP_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_BINARY_CONTENTS
  BEFORE INSERT
  ON SBI_BINARY_CONTENTS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.BIN_ID IS NULL THEN
     SELECT SBI_BINARY_CONTENTS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.BIN_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_DATA_SOURCE
  BEFORE INSERT
  ON SBI_DATA_SOURCE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.DS_ID IS NULL THEN
     SELECT SBI_DATA_SOURCE_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.DS_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_GEO_FEATURES
  BEFORE INSERT
  ON SBI_GEO_FEATURES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.FEATURE_ID IS NULL THEN
     SELECT SBI_GEO_FEATURES_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.FEATURE_ID:=NUOVO_ID;
END IF;
END;
/

CREATE TRIGGER TRG_SBI_GEO_MAPS
  BEFORE INSERT
  ON SBI_GEO_MAPS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.MAP_ID IS NULL THEN
     SELECT SBI_GEO_MAPS_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.MAP_ID:=NUOVO_ID;
END IF;
END;
/



-- CREATE PACKAGES SECTION


-- CREATE SYNONYMS SECTION


-- CREATE TABLE COMMENTS SECTION


-- CREATE ATTRIBUTE COMMENTS SECTION


