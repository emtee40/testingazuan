CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE MEMORY TABLE SBI_CHECKS(CHECK_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,DESCR VARCHAR,LABEL VARCHAR,VALUE_TYPE_CD VARCHAR,VALUE_TYPE_ID INTEGER,VALUE_1 VARCHAR,VALUE_2 VARCHAR,NAME VARCHAR,CONSTRAINT XPKSBI_CHECKS PRIMARY KEY(CHECK_ID))
CREATE MEMORY TABLE SBI_DOMAINS(VALUE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 200) NOT NULL,VALUE_CD VARCHAR,VALUE_NM VARCHAR,DOMAIN_CD VARCHAR,DOMAIN_NM VARCHAR,VALUE_DS VARCHAR,CONSTRAINT XPKSBI_DOMAINS PRIMARY KEY(VALUE_ID))
CREATE MEMORY TABLE SBI_ENGINES(ENGINE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,ENCRYPT SMALLINT,NAME VARCHAR,DESCR VARCHAR,MAIN_URL VARCHAR,SECN_URL VARCHAR,OBJ_UPL_DIR VARCHAR,OBJ_USE_DIR VARCHAR,DRIVER_NM VARCHAR,LABEL VARCHAR,ENGINE_TYPE INTEGER,CLASS_NM VARCHAR,BIOBJ_TYPE INTEGER,DEFAULT_DS_ID INTEGER,CONSTRAINT XPKSBI_ENGINES PRIMARY KEY(ENGINE_ID),CONSTRAINT FK_SBI_ENGINES_1 FOREIGN KEY(BIOBJ_TYPE) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_ENGINES_2 FOREIGN KEY(ENGINE_TYPE) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_EXT_ROLES(EXT_ROLE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,NAME VARCHAR,DESCR VARCHAR,CODE VARCHAR,ROLE_TYPE_CD VARCHAR,ROLE_TYPE_ID INTEGER,CONSTRAINT XPKSBI_EXT_ROLES PRIMARY KEY(EXT_ROLE_ID),CONSTRAINT FK_SBI_EXT_ROLES_1 FOREIGN KEY(ROLE_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_FUNC_ROLE(ROLE_ID INTEGER NOT NULL,FUNCT_ID INTEGER NOT NULL,STATE_CD VARCHAR,STATE_ID INTEGER NOT NULL,CONSTRAINT XPKSBI_FUNC_ROLE PRIMARY KEY(FUNCT_ID,STATE_ID,ROLE_ID),CONSTRAINT FK_SBI_FUNC_ROLE_2 FOREIGN KEY(STATE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_FUNC_ROLE_1 FOREIGN KEY(ROLE_ID) REFERENCES SBI_EXT_ROLES(EXT_ROLE_ID))
CREATE MEMORY TABLE SBI_FUNCTIONS(FUNCT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,FUNCT_TYPE_CD VARCHAR,PARENT_FUNCT_ID INTEGER,NAME VARCHAR,DESCR VARCHAR,PATH VARCHAR,CODE VARCHAR,PROG INTEGER NOT NULL,FUNCT_TYPE_ID INTEGER,CONSTRAINT XPKSBI_FUNCTIONS PRIMARY KEY(FUNCT_ID),CONSTRAINT FK_SBI_FUNCTIONS_1 FOREIGN KEY(FUNCT_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_FUNCTIONS_2 FOREIGN KEY(PARENT_FUNCT_ID) REFERENCES SBI_FUNCTIONS(FUNCT_ID))
CREATE MEMORY TABLE SBI_LOV(LOV_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,DESCR VARCHAR,LABEL VARCHAR,INPUT_TYPE_CD VARCHAR,DEFAULT_VAL VARCHAR,LOV_PROVIDER VARCHAR,INPUT_TYPE_ID INTEGER,PROFILE_ATTR VARCHAR,NAME VARCHAR,CONSTRAINT XPKSBI_LOV PRIMARY KEY(LOV_ID),CONSTRAINT FK_SBI_LOV_1 FOREIGN KEY(INPUT_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_OBJ_FUNC(BIOBJ_ID INTEGER NOT NULL,FUNCT_ID INTEGER NOT NULL,PROG INTEGER,CONSTRAINT XPKSBI_OBJ_FUNC PRIMARY KEY(BIOBJ_ID,FUNCT_ID),CONSTRAINT FK_SBI_OBJ_FUNC_1 FOREIGN KEY(FUNCT_ID) REFERENCES SBI_FUNCTIONS(FUNCT_ID))
CREATE MEMORY TABLE SBI_OBJ_PAR(PAR_ID INTEGER NOT NULL,BIOBJ_ID INTEGER NOT NULL,LABEL VARCHAR,REQ_FL SMALLINT,MOD_FL SMALLINT,VIEW_FL SMALLINT,MULT_FL SMALLINT,PROG INTEGER NOT NULL,PARURL_NM VARCHAR,OBJ_PAR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,PRIORITY INTEGER,CONSTRAINT XPKSBI_OBJ_PAR PRIMARY KEY(OBJ_PAR_ID))
CREATE MEMORY TABLE SBI_OBJ_STATE(BIOBJ_ID INTEGER NOT NULL,STATE_ID INTEGER NOT NULL,END_DT DATE,START_DT DATE NOT NULL,NOTE VARCHAR,CONSTRAINT XPKSBI_OBJ_STATE PRIMARY KEY(BIOBJ_ID,STATE_ID,START_DT),CONSTRAINT FK_SBI_OBJ_STATE_2 FOREIGN KEY(STATE_ID) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_OBJECTS(BIOBJ_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,ENGINE_ID INTEGER,DESCR VARCHAR,LABEL VARCHAR,ENCRYPT SMALLINT,PATH VARCHAR,REL_NAME VARCHAR,STATE_ID INTEGER,STATE_CD VARCHAR,BIOBJ_TYPE_CD VARCHAR,BIOBJ_TYPE_ID INTEGER,SCHED_FL SMALLINT,EXEC_MODE_ID INTEGER,STATE_CONS_ID INTEGER,EXEC_MODE_CD VARCHAR,STATE_CONS_CD VARCHAR,NAME VARCHAR,VISIBLE SMALLINT,UUID VARCHAR,DATA_SOURCE_ID INTEGER,CONSTRAINT XPKSBI_OBJECTS PRIMARY KEY(BIOBJ_ID),CONSTRAINT FK_SBI_OBJECTS_1 FOREIGN KEY(STATE_CONS_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_OBJECTS_2 FOREIGN KEY(STATE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_OBJECTS_3 FOREIGN KEY(BIOBJ_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_OBJECTS_4 FOREIGN KEY(EXEC_MODE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_OBJECTS_5 FOREIGN KEY(ENGINE_ID) REFERENCES SBI_ENGINES(ENGINE_ID))
CREATE MEMORY TABLE SBI_PARAMETERS(PAR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,FUNCTIONAL_FLAG SMALLINT DEFAULT 1 NOT NULL,DESCR VARCHAR,LENGTH SMALLINT,LABEL VARCHAR,PAR_TYPE_CD VARCHAR,MASK VARCHAR,PAR_TYPE_ID INTEGER,NAME VARCHAR,CONSTRAINT XPKSBI_PARAMETERS PRIMARY KEY(PAR_ID),CONSTRAINT FK_SBI_PARAMETERS_1 FOREIGN KEY(PAR_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_PARUSE(USE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,LOV_ID INTEGER,LABEL VARCHAR,DESCR VARCHAR,PAR_ID INTEGER,NAME VARCHAR,MAN_IN INTEGER,SELECTION_TYPE VARCHAR DEFAULT 'LIST',MULTIVALUE_FLAG SMALLINT DEFAULT 0,CONSTRAINT XPKSBI_PARUSE PRIMARY KEY(USE_ID),CONSTRAINT FK_SBI_PARUSE_2 FOREIGN KEY(LOV_ID) REFERENCES SBI_LOV(LOV_ID),CONSTRAINT FK_SBI_PARUSE_1 FOREIGN KEY(PAR_ID) REFERENCES SBI_PARAMETERS(PAR_ID))
CREATE MEMORY TABLE SBI_PARUSE_CK(CHECK_ID INTEGER NOT NULL,USE_ID INTEGER NOT NULL,PROG INTEGER,CONSTRAINT XPKSBI_PARUSE_CK PRIMARY KEY(USE_ID,CHECK_ID),CONSTRAINT FK_SBI_PARUSE_CK_2 FOREIGN KEY(CHECK_ID) REFERENCES SBI_CHECKS(CHECK_ID),CONSTRAINT FK_SBI_PARUSE_CK_1 FOREIGN KEY(USE_ID) REFERENCES SBI_PARUSE(USE_ID))
CREATE MEMORY TABLE SBI_PARUSE_DET(EXT_ROLE_ID INTEGER NOT NULL,PROG INTEGER,USE_ID INTEGER NOT NULL,HIDDEN_FL SMALLINT,DEFAULT_VAL VARCHAR,CONSTRAINT XPKSBI_PARUSE_DET PRIMARY KEY(USE_ID,EXT_ROLE_ID),CONSTRAINT FK_SBI_PARUSE_DET_2 FOREIGN KEY(EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES(EXT_ROLE_ID),CONSTRAINT FK_SBI_PARUSE_DET_1 FOREIGN KEY(USE_ID) REFERENCES SBI_PARUSE(USE_ID))
CREATE MEMORY TABLE SBI_SUBREPORTS(MASTER_RPT_ID INTEGER NOT NULL,SUB_RPT_ID INTEGER NOT NULL,PRIMARY KEY(MASTER_RPT_ID,SUB_RPT_ID),CONSTRAINT FK_SBI_SUBREPORTS_1 FOREIGN KEY(MASTER_RPT_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_SUBREPORTS_2 FOREIGN KEY(SUB_RPT_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID))
CREATE MEMORY TABLE SBI_OBJ_PARUSE(OBJ_PAR_ID INTEGER NOT NULL,USE_ID INTEGER NOT NULL,OBJ_PAR_FATHER_ID INTEGER NOT NULL,FILTER_OPERATION VARCHAR NOT NULL,PROG INTEGER NOT NULL,FILTER_COLUMN VARCHAR NOT NULL,PRE_CONDITION VARCHAR,POST_CONDITION VARCHAR,LOGIC_OPERATOR VARCHAR,CONSTRAINT XPKSBI_OBJ_PARUSE PRIMARY KEY(OBJ_PAR_ID,USE_ID,OBJ_PAR_FATHER_ID,FILTER_OPERATION),CONSTRAINT FK_SBI_OBJ_PARUSE_1 FOREIGN KEY(OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR(OBJ_PAR_ID),CONSTRAINT FK_SBI_OBJ_PARUSE_2 FOREIGN KEY(USE_ID) REFERENCES SBI_PARUSE(USE_ID),CONSTRAINT FK_SBI_OBJ_PARUSE_3 FOREIGN KEY(OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR(OBJ_PAR_ID))
CREATE MEMORY TABLE SBI_EVENTS(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,USER_EVENT VARCHAR NOT NULL,CONSTRAINT XPKSBI_EVENTS PRIMARY KEY(ID))
CREATE MEMORY TABLE SBI_EVENTS_LOG(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,USER_EVENT VARCHAR NOT NULL,EVENT_DATE TIMESTAMP DEFAULT NOW NOT NULL,DESCR VARCHAR NOT NULL,PARAMS VARCHAR,HANDLER VARCHAR DEFAULT 'it.eng.spagobi.events.handlers.DefaultEventPresentationHandler' NOT NULL,CONSTRAINT XPKSBI_EVENTS_LOG PRIMARY KEY(ID))
CREATE MEMORY TABLE SBI_EVENTS_ROLES(EVENT_ID INTEGER NOT NULL,ROLE_ID INTEGER NOT NULL,CONSTRAINT XPKSBI_EVENTS_ROLES PRIMARY KEY(EVENT_ID,ROLE_ID),CONSTRAINT FK_SBI_EVENTS_ROLES_1 FOREIGN KEY(ROLE_ID) REFERENCES SBI_EXT_ROLES(EXT_ROLE_ID),CONSTRAINT FK_SBI_EVENTS_ROLES_2 FOREIGN KEY(EVENT_ID) REFERENCES SBI_EVENTS_LOG(ID))
CREATE MEMORY TABLE SBI_AUDIT(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,USERNAME VARCHAR NOT NULL,USERGROUP VARCHAR,DOC_REF INTEGER,DOC_ID INTEGER,DOC_LABEL VARCHAR NOT NULL,DOC_NAME VARCHAR NOT NULL,DOC_TYPE VARCHAR NOT NULL,DOC_STATE VARCHAR NOT NULL,DOC_PARAMETERS VARCHAR,ENGINE_REF INTEGER,ENGINE_ID INTEGER,ENGINE_LABEL VARCHAR NOT NULL,ENGINE_NAME VARCHAR NOT NULL,ENGINE_TYPE VARCHAR NOT NULL,ENGINE_URL VARCHAR,ENGINE_DRIVER VARCHAR,ENGINE_CLASS VARCHAR,REQUEST_TIME TIMESTAMP NOT NULL,EXECUTION_START TIMESTAMP,EXECUTION_END TIMESTAMP,EXECUTION_TIME INTEGER,EXECUTION_STATE VARCHAR,ERROR SMALLINT,ERROR_MESSAGE VARCHAR,ERROR_CODE VARCHAR,EXECUTION_MODALITY VARCHAR,CONSTRAINT FK_SBI_AUDIT_1 FOREIGN KEY(DOC_REF) REFERENCES SBI_OBJECTS(BIOBJ_ID) ON DELETE SET NULL,CONSTRAINT FK_SBI_AUDIT_2 FOREIGN KEY(ENGINE_REF) REFERENCES SBI_ENGINES(ENGINE_ID) ON DELETE SET NULL)
CREATE MEMORY TABLE QRTZ_JOB_DETAILS(JOB_NAME VARCHAR(80) NOT NULL,JOB_GROUP VARCHAR(80) NOT NULL,DESCRIPTION VARCHAR(120),JOB_CLASS_NAME VARCHAR(128) NOT NULL,IS_DURABLE VARCHAR(1) NOT NULL,IS_VOLATILE VARCHAR(1) NOT NULL,IS_STATEFUL VARCHAR(1) NOT NULL,REQUESTS_RECOVERY VARCHAR(1) NOT NULL,JOB_DATA BINARY,PRIMARY KEY(JOB_NAME,JOB_GROUP))
CREATE MEMORY TABLE QRTZ_JOB_LISTENERS(JOB_NAME VARCHAR(80) NOT NULL,JOB_GROUP VARCHAR(80) NOT NULL,JOB_LISTENER VARCHAR(80) NOT NULL,PRIMARY KEY(JOB_NAME,JOB_GROUP,JOB_LISTENER),CONSTRAINT SYS_FK_47 FOREIGN KEY(JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))
CREATE MEMORY TABLE QRTZ_TRIGGERS(TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,JOB_NAME VARCHAR(80) NOT NULL,JOB_GROUP VARCHAR(80) NOT NULL,IS_VOLATILE VARCHAR(1) NOT NULL,DESCRIPTION VARCHAR(120),NEXT_FIRE_TIME NUMERIC(13),PREV_FIRE_TIME NUMERIC(13),PRIORITY INTEGER,TRIGGER_STATE VARCHAR(16) NOT NULL,TRIGGER_TYPE VARCHAR(8) NOT NULL,START_TIME NUMERIC(13) NOT NULL,END_TIME NUMERIC(13),CALENDAR_NAME VARCHAR(80),MISFIRE_INSTR NUMERIC(2),JOB_DATA BINARY,PRIMARY KEY(TRIGGER_NAME,TRIGGER_GROUP),CONSTRAINT SYS_FK_51 FOREIGN KEY(JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))
CREATE MEMORY TABLE QRTZ_SIMPLE_TRIGGERS(TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,REPEAT_COUNT NUMERIC(7) NOT NULL,REPEAT_INTERVAL NUMERIC(12) NOT NULL,TIMES_TRIGGERED NUMERIC(7) NOT NULL,PRIMARY KEY(TRIGGER_NAME,TRIGGER_GROUP),CONSTRAINT SYS_FK_55 FOREIGN KEY(TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE QRTZ_CRON_TRIGGERS(TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,CRON_EXPRESSION VARCHAR(80) NOT NULL,TIME_ZONE_ID VARCHAR(80),PRIMARY KEY(TRIGGER_NAME,TRIGGER_GROUP),CONSTRAINT SYS_FK_59 FOREIGN KEY(TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE QRTZ_BLOB_TRIGGERS(TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,BLOB_DATA BINARY,PRIMARY KEY(TRIGGER_NAME,TRIGGER_GROUP),CONSTRAINT SYS_FK_63 FOREIGN KEY(TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE QRTZ_TRIGGER_LISTENERS(TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,TRIGGER_LISTENER VARCHAR(80) NOT NULL,PRIMARY KEY(TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),CONSTRAINT SYS_FK_67 FOREIGN KEY(TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE QRTZ_CALENDARS(CALENDAR_NAME VARCHAR(80) NOT NULL PRIMARY KEY,CALENDAR BINARY NOT NULL)
CREATE MEMORY TABLE QRTZ_PAUSED_TRIGGER_GRPS(TRIGGER_GROUP VARCHAR(80) NOT NULL PRIMARY KEY)
CREATE MEMORY TABLE QRTZ_FIRED_TRIGGERS(ENTRY_ID VARCHAR(95) NOT NULL PRIMARY KEY,TRIGGER_NAME VARCHAR(80) NOT NULL,TRIGGER_GROUP VARCHAR(80) NOT NULL,IS_VOLATILE VARCHAR(1) NOT NULL,INSTANCE_NAME VARCHAR(80) NOT NULL,FIRED_TIME NUMERIC(13) NOT NULL,PRIORITY INTEGER NOT NULL,STATE VARCHAR(16) NOT NULL,JOB_NAME VARCHAR(80),JOB_GROUP VARCHAR(80),IS_STATEFUL VARCHAR(1),REQUESTS_RECOVERY VARCHAR(1))
CREATE MEMORY TABLE QRTZ_SCHEDULER_STATE(INSTANCE_NAME VARCHAR(80) NOT NULL PRIMARY KEY,LAST_CHECKIN_TIME NUMERIC(13) NOT NULL,CHECKIN_INTERVAL NUMERIC(13) NOT NULL)
CREATE MEMORY TABLE QRTZ_LOCKS(LOCK_NAME VARCHAR(40) NOT NULL PRIMARY KEY)
CREATE MEMORY TABLE SBI_GEO_MAPS(MAP_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,NAME VARCHAR,DESCR VARCHAR,URL VARCHAR,FORMAT VARCHAR,CONSTRAINT XPKSBI_MAPS PRIMARY KEY(MAP_ID))
CREATE MEMORY TABLE SBI_GEO_FEATURES(FEATURE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,NAME VARCHAR,DESCR VARCHAR,TYPE VARCHAR,CONSTRAINT XPKSBI_FEATURES PRIMARY KEY(FEATURE_ID))
CREATE MEMORY TABLE SBI_GEO_MAP_FEATURES(MAP_ID INTEGER NOT NULL,FEATURE_ID INTEGER NOT NULL,SVG_GROUP VARCHAR,VISIBLE_FLAG VARCHAR,CONSTRAINT XPKSBI_GEO_MAP_FEATURES PRIMARY KEY(MAP_ID,FEATURE_ID),CONSTRAINT FK_SBI_GEO_MAP_FEATURES_1 FOREIGN KEY(MAP_ID) REFERENCES SBI_GEO_MAPS(MAP_ID),CONSTRAINT FK_SBI_GEO_MAP_FEATURES_2 FOREIGN KEY(FEATURE_ID) REFERENCES SBI_GEO_FEATURES(FEATURE_ID))
CREATE MEMORY TABLE SBI_VIEWPOINTS(VP_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIOBJ_ID INTEGER NOT NULL,VP_OWNER VARCHAR,VP_NAME VARCHAR NOT NULL,VP_DESC VARCHAR,VP_SCOPE VARCHAR NOT NULL,VP_VALUE_PARAMS VARCHAR,VP_CREATION_DATE TIMESTAMP DEFAULT NOW NOT NULL,CONSTRAINT XPKSBI_VIEWPOINTS PRIMARY KEY(VP_ID),CONSTRAINT FK_SBI_VIEWPOINTS_1 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID))
CREATE MEMORY TABLE SBI_DATA_SOURCE(DS_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL,DESCR VARCHAR,LABEL VARCHAR NOT NULL,JNDI VARCHAR,URL_CONNECTION VARCHAR,USERNAME VARCHAR,PWD VARCHAR,DRIVER VARCHAR,DIALECT_ID INTEGER NOT NULL,CONSTRAINT XPKSBI_DATA_SOURCE PRIMARY KEY(DS_ID),CONSTRAINT FK_SBI_DATA_SOURCE_1 FOREIGN KEY(DIALECT_ID) REFERENCES SBI_DOMAINS(VALUE_ID))
CREATE MEMORY TABLE SBI_BINARY_CONTENTS(BIN_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIN_CONTENT LONGVARBINARY,CONSTRAINT XPKSBI_BINARY_CONTENTS PRIMARY KEY(BIN_ID))
CREATE MEMORY TABLE SBI_OBJECT_TEMPLATES(OBJ_TEMP_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIOBJ_ID INTEGER,BIN_ID INTEGER,NAME VARCHAR,PROG INTEGER NOT NULL,CREATION_DATE TIMESTAMP,ACTIVE BOOLEAN,CONSTRAINT XPKSBI_OBJECT_TEMPLATES PRIMARY KEY(OBJ_TEMP_ID),CONSTRAINT FK_SBI_OBJECT_TEMPLATES_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_OBJECT_TEMPLATES_1 FOREIGN KEY(BIN_ID) REFERENCES SBI_BINARY_CONTENTS(BIN_ID))
CREATE MEMORY TABLE SBI_OBJECT_NOTES(OBJ_NOTE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIOBJ_ID INTEGER,BIN_ID INTEGER,EXEC_REQ VARCHAR(500),CONSTRAINT XPKSBI_OBJECT_NOTES PRIMARY KEY(OBJ_NOTE_ID),CONSTRAINT FK_SBI_OBJECT_NOTES_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_OBJECT_NOTES_1 FOREIGN KEY(BIN_ID) REFERENCES SBI_BINARY_CONTENTS(BIN_ID))
CREATE MEMORY TABLE SBI_SUBOBJECTS(SUBOBJ_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIOBJ_ID INTEGER,BIN_ID INTEGER,NAME VARCHAR(40),DESCRIPTION VARCHAR(80),OWNER VARCHAR(40),ISPUBLIC BOOLEAN,CREATION_DATE TIMESTAMP,LAST_CHANGE_DATE TIMESTAMP,CONSTRAINT XPKSBI_SUBOBJECT PRIMARY KEY(SUBOBJ_ID),CONSTRAINT FK_SBI_SUBOBJECT_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_SUBOBJECT_1 FOREIGN KEY(BIN_ID) REFERENCES SBI_BINARY_CONTENTS(BIN_ID))
CREATE MEMORY TABLE SBI_SNAPSHOTS(SNAP_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,BIOBJ_ID INTEGER,BIN_ID INTEGER,NAME VARCHAR(40),DESCRIPTION VARCHAR(80),CREATION_DATE TIMESTAMP,CONSTRAINT XPKSBI_SNAPSHOT PRIMARY KEY(SNAP_ID),CONSTRAINT FK_SBI_SNAPSHOT_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_SNAPSHOT_1 FOREIGN KEY(BIN_ID) REFERENCES SBI_BINARY_CONTENTS(BIN_ID))
CREATE MEMORY TABLE SBI_USER_FUNCTIONALITY(USER_FUNCT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,NAME VARCHAR(50) NOT NULL,DESCRIPTION VARCHAR(100) NOT NULL,CONSTRAINT XPKSBI_USER_FUNCTIONALITY PRIMARY KEY(USER_FUNCT_ID))
CREATE MEMORY TABLE SBI_ROLE_TYPE_USER_FUNCTIONALITY(ROLE_TYPE_ID INTEGER NOT NULL,USER_FUNCT_ID INTEGER NOT NULL,CONSTRAINT FK_SBI_ROLE_TYPE_USER_FUNCTIONALITY_1 FOREIGN KEY(ROLE_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID),CONSTRAINT FK_SBI_ROLE_TYPE_USER_FUNCTIONALITY_2 FOREIGN KEY(USER_FUNCT_ID) REFERENCES SBI_USER_FUNCTIONALITY(USER_FUNCT_ID))
CREATE MEMORY TABLE SBI_DOSSIER_PRESENTATIONS(PRESENTATION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,WORKFLOW_PROCESS_ID BIGINT,BIOBJ_ID INTEGER,BIN_ID INTEGER,NAME VARCHAR,PROG INTEGER,CREATION_DATE TIMESTAMP,APPROVED SMALLINT,CONSTRAINT XPKSBI_DOSSIER_PRESENTATIONS PRIMARY KEY(PRESENTATION_ID),CONSTRAINT FK_SBI_DOSSIER_PRESENTATIONS_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),CONSTRAINT FK_SBI_DOSSIER_PRESENTATIONS_1 FOREIGN KEY(BIN_ID) REFERENCES SBI_BINARY_CONTENTS(BIN_ID))
CREATE MEMORY TABLE SBI_DOSSIER_PARTS_TEMP(PART_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,WORKFLOW_PROCESS_ID BIGINT,BIOBJ_ID INTEGER,PAGE_ID INTEGER,CONSTRAINT XPKSBI_DOSSIER_PARTS_TEMP PRIMARY KEY(PART_ID),CONSTRAINT FK_SBI_DOSSIER_PARTS_TEMP_1 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID))
CREATE MEMORY TABLE SBI_DOSSIER_BINARY_CONTENTS_TEMP(BIN_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,PART_ID INTEGER,NAME VARCHAR,BIN_CONTENT LONGVARBINARY,TYPE VARCHAR,CREATION_DATE TIMESTAMP,CONSTRAINT XPKSBI_DOSSIER_BINARY_CONTENTS_TEMP PRIMARY KEY(BIN_ID),CONSTRAINT FK_SBI_DOSSIER_BINARY_CONTENTS_TEMP_1 FOREIGN KEY(PART_ID) REFERENCES SBI_DOSSIER_PARTS_TEMP(PART_ID))
ALTER TABLE SBI_CHECKS ADD CONSTRAINT FK_SBI_CHECKS_1 FOREIGN KEY(VALUE_TYPE_ID) REFERENCES SBI_DOMAINS(VALUE_ID)
ALTER TABLE SBI_ENGINES ADD CONSTRAINT FK_SBI_ENGINE_3 FOREIGN KEY(DEFAULT_DS_ID) REFERENCES SBI_DATA_SOURCE(DS_ID)
ALTER TABLE SBI_FUNC_ROLE ADD CONSTRAINT FK_SBI_FUNC_ROLE_3 FOREIGN KEY(FUNCT_ID) REFERENCES SBI_FUNCTIONS(FUNCT_ID)
ALTER TABLE SBI_OBJ_FUNC ADD CONSTRAINT FK_SBI_OBJ_FUNC_2 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID)
ALTER TABLE SBI_OBJ_PAR ADD CONSTRAINT FK_SBI_OBJ_PAR_1 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID)
ALTER TABLE SBI_OBJ_PAR ADD CONSTRAINT FK_SBI_OBJ_PAR_2 FOREIGN KEY(PAR_ID) REFERENCES SBI_PARAMETERS(PAR_ID)
ALTER TABLE SBI_OBJ_STATE ADD CONSTRAINT FK_SBI_OBJ_STATE_1 FOREIGN KEY(BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID)
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT FK_SBI_OBJECTS_6 FOREIGN KEY(DATA_SOURCE_ID) REFERENCES SBI_DATA_SOURCE(DS_ID)
ALTER TABLE SBI_CHECKS ALTER COLUMN CHECK_ID RESTART WITH 137
ALTER TABLE SBI_DOMAINS ALTER COLUMN VALUE_ID RESTART WITH 124
ALTER TABLE SBI_ENGINES ALTER COLUMN ENGINE_ID RESTART WITH 118
ALTER TABLE SBI_EXT_ROLES ALTER COLUMN EXT_ROLE_ID RESTART WITH 167
ALTER TABLE SBI_FUNCTIONS ALTER COLUMN FUNCT_ID RESTART WITH 153
ALTER TABLE SBI_LOV ALTER COLUMN LOV_ID RESTART WITH 214
ALTER TABLE SBI_OBJ_PAR ALTER COLUMN OBJ_PAR_ID RESTART WITH 312
ALTER TABLE SBI_OBJECTS ALTER COLUMN BIOBJ_ID RESTART WITH 226
ALTER TABLE SBI_PARAMETERS ALTER COLUMN PAR_ID RESTART WITH 205
ALTER TABLE SBI_PARUSE ALTER COLUMN USE_ID RESTART WITH 213
ALTER TABLE SBI_EVENTS ALTER COLUMN ID RESTART WITH 405
ALTER TABLE SBI_EVENTS_LOG ALTER COLUMN ID RESTART WITH 100
ALTER TABLE SBI_AUDIT ALTER COLUMN ID RESTART WITH 0
ALTER TABLE SBI_GEO_MAPS ALTER COLUMN MAP_ID RESTART WITH 1
ALTER TABLE SBI_GEO_FEATURES ALTER COLUMN FEATURE_ID RESTART WITH 1
ALTER TABLE SBI_VIEWPOINTS ALTER COLUMN VP_ID RESTART WITH 1
ALTER TABLE SBI_DATA_SOURCE ALTER COLUMN DS_ID RESTART WITH 100
ALTER TABLE SBI_BINARY_CONTENTS ALTER COLUMN BIN_ID RESTART WITH 1
ALTER TABLE SBI_OBJECT_TEMPLATES ALTER COLUMN OBJ_TEMP_ID RESTART WITH 1
ALTER TABLE SBI_OBJECT_NOTES ALTER COLUMN OBJ_NOTE_ID RESTART WITH 1
ALTER TABLE SBI_SUBOBJECTS ALTER COLUMN SUBOBJ_ID RESTART WITH 1
ALTER TABLE SBI_SNAPSHOTS ALTER COLUMN SNAP_ID RESTART WITH 1
ALTER TABLE SBI_USER_FUNCTIONALITY ALTER COLUMN USER_FUNCT_ID RESTART WITH 24
ALTER TABLE SBI_DOSSIER_PRESENTATIONS ALTER COLUMN PRESENTATION_ID RESTART WITH 1
ALTER TABLE SBI_DOSSIER_PARTS_TEMP ALTER COLUMN PART_ID RESTART WITH 1
ALTER TABLE SBI_DOSSIER_BINARY_CONTENTS_TEMP ALTER COLUMN BIN_ID RESTART WITH 1
CREATE USER SA PASSWORD ""
GRANT DBA TO SA
SET WRITE_DELAY 60
SET SCHEMA PUBLIC
INSERT INTO SBI_CHECKS VALUES(130,'Control if parameter is an Internet Address','CK-FIX-01','INTERNET ADDRESS',64,NULL,NULL,'Internet Address')
INSERT INTO SBI_CHECKS VALUES(131,'Control if  a parameter is Numeric','CK-FIX-02','NUMERIC',65,NULL,NULL,'Numeric')
INSERT INTO SBI_CHECKS VALUES(132,'Control if  a parameter is Alfanumeric','CK-FIX-03','ALFANUMERIC',66,NULL,NULL,'Alfanumeric')
INSERT INTO SBI_CHECKS VALUES(133,'Control if a parameter is a letter string','CK-FIX-04','LETTERSTRING',67,NULL,NULL,'Letter String')
INSERT INTO SBI_CHECKS VALUES(134,'Control if the parameter is present','CK-FIX-05','MANDATORY',68,NULL,NULL,'Mandatory')
INSERT INTO SBI_CHECKS VALUES(135,'Control if parameter is a Fiscal Code','CK-FIX-06','FISCALCODE',69,NULL,NULL,'Fiscal Code')
INSERT INTO SBI_CHECKS VALUES(136,'Control if parameter is a E-Mail','CK-FIX-07','EMAIL',70,NULL,NULL,'E-Mail')
INSERT INTO SBI_DOMAINS VALUES(36,'QUERY','Query statement','INPUT_TYPE','Input mode and values','Query statement to load list of values to choose in')
INSERT INTO SBI_DOMAINS VALUES(37,'JAVA_CLASS','Java class','INPUT_TYPE','Input mode and values','Java class to load list of values to choose in')
INSERT INTO SBI_DOMAINS VALUES(38,'SCRIPT','Script to load values','INPUT_TYPE','Input mode and values','Script to load values')
INSERT INTO SBI_DOMAINS VALUES(39,'FIX_LOV','Fixed list of values','INPUT_TYPE','Input mode and values','Predefined and hard coded list of values to choose in')
INSERT INTO SBI_DOMAINS VALUES(40,'REPORT','Report','BIOBJ_TYPE','BI Object types','Basic business intelligence objects type')
INSERT INTO SBI_DOMAINS VALUES(41,'OLAP','On-line analytical processing','BIOBJ_TYPE','BI Object types','Dimensional analysis of significant facts')
INSERT INTO SBI_DOMAINS VALUES(42,'DATA_MINING','Data mining model','BIOBJ_TYPE','BI Object types','Model to find out hidden information in data')
INSERT INTO SBI_DOMAINS VALUES(43,'DASH','Dashboard','BIOBJ_TYPE','BI Object types','Dashboard to monitor perfomance indicators')
INSERT INTO SBI_DOMAINS VALUES(44,'BOOL','Boolean','VALUE_TYPE','Input value types to check','Boolean input value type')
INSERT INTO SBI_DOMAINS VALUES(45,'SINGLE','Single value','VALUE_TYPE','Input value types to check','Only single value allowed')
INSERT INTO SBI_DOMAINS VALUES(46,'MULTI','Multivalue','VALUE_TYPE','Input value types to check','Many values are allowed')
INSERT INTO SBI_DOMAINS VALUES(47,'DATE','Date','PAR_TYPE','Parameter type','Parameter expects date values')
INSERT INTO SBI_DOMAINS VALUES(48,'NUM','Number','PAR_TYPE','Parameter type','Parameter expects numerical values')
INSERT INTO SBI_DOMAINS VALUES(49,'STRING','String','PAR_TYPE','Parameter type','Parameter expects textual values')
INSERT INTO SBI_DOMAINS VALUES(50,'USER','Functional role','ROLE_TYPE','User role type','Functional role for end users')
INSERT INTO SBI_DOMAINS VALUES(51,'ADMIN','Administrative role','ROLE_TYPE','User role type','Administrative role for developer users')
INSERT INTO SBI_DOMAINS VALUES(52,'SUSP','Suspended','STATE','Object state','Document temporanlly not in use')
INSERT INTO SBI_DOMAINS VALUES(54,'LOW_FUNCT','Low level functionality','FUNCT_TYPE','Functionality','BI Functionality joined to categories tree')
INSERT INTO SBI_DOMAINS VALUES(55,'DEV','Development','STATE','Object state','Document in development phase')
INSERT INTO SBI_DOMAINS VALUES(56,'TEST','Test','STATE','Object state','Document in testing phase')
INSERT INTO SBI_DOMAINS VALUES(57,'REL','Released','STATE','Object state','Document released for end users use')
INSERT INTO SBI_DOMAINS VALUES(58,'DATE','Date','CHECK','Check','Date')
INSERT INTO SBI_DOMAINS VALUES(59,'REGEXP','Regexp','CHECK','Check','Regular Expression ')
INSERT INTO SBI_DOMAINS VALUES(60,'MAXLENGTH','Max Length','CHECK','Check','Max Length')
INSERT INTO SBI_DOMAINS VALUES(61,'RANGE','Range','CHECK','Check','Range')
INSERT INTO SBI_DOMAINS VALUES(62,'DECIMALS','Decimal','CHECK','Check','Decimal')
INSERT INTO SBI_DOMAINS VALUES(63,'MINLENGTH','Min Length','CHECK','Check','Min Length')
INSERT INTO SBI_DOMAINS VALUES(64,'INTERNET ADDRESS','Internet Address','PRED_CHECK','Pred Check','Internet Address')
INSERT INTO SBI_DOMAINS VALUES(65,'NUMERIC','Numeric','PRED_CHECK','Pred Check','Numeric')
INSERT INTO SBI_DOMAINS VALUES(66,'ALFANUMERIC','Alfanumeric','PRED_CHECK','Pred Check','Alfanumeric')
INSERT INTO SBI_DOMAINS VALUES(67,'LETTERSTRING','Letter String','PRED_CHECK','Pred Check','Letter')
INSERT INTO SBI_DOMAINS VALUES(68,'MANDATORY','Mandatory','PRED_CHECK','Check','Mandatory')
INSERT INTO SBI_DOMAINS VALUES(69,'FISCALCODE','Fiscal Code','PRED_CHECK','Pred Check','Fiscal Code')
INSERT INTO SBI_DOMAINS VALUES(70,'EMAIL','E-Mail','PRED_CHECK','Pred Check','E-Mail')
INSERT INTO SBI_DOMAINS VALUES(103,'DATAMART','Datamart Model','BIOBJ_TYPE','BI Object types','Basic business intelligence objects type')
INSERT INTO SBI_DOMAINS VALUES(104,'EXT','External Engine','ENGINE_TYPE','Engine types','Business intelligence external engine of SpagoBI platform')
INSERT INTO SBI_DOMAINS VALUES(105,'INT','Internal Engine','ENGINE_TYPE','Engine types','Business intelligence internal engine of SpagoBI platform')
INSERT INTO SBI_DOMAINS VALUES(106,'MAP','Map','BIOBJ_TYPE','BI Object types','Map')
INSERT INTO SBI_DOMAINS VALUES(107,'DOSSIER','Dossier','BIOBJ_TYPE','BI Object types','Dossier')
INSERT INTO SBI_DOMAINS VALUES(108,'LIST','List values selection','SELECTION_TYPE','Selection modality of parameter values','Single-value selection from a list')
INSERT INTO SBI_DOMAINS VALUES(109,'CHECK_LIST','CheckList values selection','SELECTION_TYPE','Selection modality of parameter values','Multi-value selection from a checklist')
INSERT INTO SBI_DOMAINS VALUES(110,'COMBOBOX','ComboBox values selection','SELECTION_TYPE','Selection modality of parameter values','Single value selection from a combobox')
INSERT INTO SBI_DOMAINS VALUES(111,'OFFICE_DOC','Office document','BIOBJ_TYPE','BI Object types','Office document')
INSERT INTO SBI_DOMAINS VALUES(112,'ETL','ETL process','BIOBJ_TYPE','BI Object types','ETL process')
INSERT INTO SBI_DOMAINS VALUES(113,'USER_FUNCT','User functionality','FUNCT_TYPE','Functionality','BI Functionality joined to categories tree')
INSERT INTO SBI_DOMAINS VALUES(114,'DEV_ROLE','Developer Role','ROLE_TYPE','Developer role type','Predefined roles in BI portal')
INSERT INTO SBI_DOMAINS VALUES(115,'TEST_ROLE','Tester Role','ROLE_TYPE','Tester role type','Predefined roles in BI portal')
INSERT INTO SBI_DOMAINS VALUES(116,'DEFAULT','','DIALECT_HIB','','-1')
INSERT INTO SBI_DOMAINS VALUES(117,'ORACLE','Oracle  (any version)','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.OracleDialect')
INSERT INTO SBI_DOMAINS VALUES(118,'ORACLE 9i/10g','Oracle  (Oracle 9i/10g)','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.Oracle9Dialect')
INSERT INTO SBI_DOMAINS VALUES(119,'SQLSERVER','SQL Server ','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.SQLServerDialect')
INSERT INTO SBI_DOMAINS VALUES(120,'HQL','HQL ','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.HSQLDialect')
INSERT INTO SBI_DOMAINS VALUES(121,'MYSQL','MySql ','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.MySQLInnoDBDialect')
INSERT INTO SBI_DOMAINS VALUES(122,'POSTGRESQL','PostgreSQL ','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.PostgreSQLDialect')
INSERT INTO SBI_DOMAINS VALUES(123,'INGRES','Ingres ','DIALECT_HIB','Predefined hibernate dialect','org.hibernate.dialect.IngresDialect')
INSERT INTO SBI_ENGINES VALUES(110,0,'Dashboard Internal Engine','Dashboard Internal Engine','','','','','','DashboardInternalEng',105,'it.eng.spagobi.engines.dashboard.SpagoBIDashboardInternalEngine',43,NULL)
INSERT INTO SBI_ENGINES VALUES(115,0,'Dossier Internal Engine','Dossier Internal Engine','','','','','','DossierInternalEng',105,'it.eng.spagobi.engines.dossier.engines.SpagoBIDossierInternalEngine',107,NULL)
INSERT INTO SBI_ENGINES VALUES(116,0,'Office Document Internal Engine','Office Document Internal Engine','','','','','','OfficeDocumentInternalEng',105,'it.eng.spagobi.engines.officeDocuments.SpagoBIOfficeDocumentInternalEngine',111,NULL)
INSERT INTO SBI_ENGINES VALUES(117,0,'Dashboard Composition Internal Engine','Dashboard Composition Internal Engine','','','','','','DashboardCompIE',105,'it.eng.spagobi.engines.dashboardscomposition.SpagoBIDashboardsCompositionInternalEngine',43,NULL)
INSERT INTO SBI_LOV VALUES(100,'Current month of the year format mm','CURRENT_MONTH_YEAR','SCRIPT',NULL,'<SCRIPTLOV><SCRIPT>Date now = new Date();\u000d\u000aint month = now.getMonth() + 1;\u000d\u000aString monthStr = month.toString();\u000d\u000aif (month < 10) monthStr = ''0'' + monthStr;\u000d\u000areturnValue(monthStr);</SCRIPT><VALUE-COLUMN>VALUE</VALUE-COLUMN><DESCRIPTION-COLUMN>VALUE</DESCRIPTION-COLUMN><VISIBLE-COLUMNS>VALUE</VISIBLE-COLUMNS><INVISIBLE-COLUMNS></INVISIBLE-COLUMNS></SCRIPTLOV>',38,NULL,'Current month of the year')
INSERT INTO SBI_LOV VALUES(101,'Current year format yyyy','CURRENT_YEAR','SCRIPT',NULL,'<SCRIPTLOV><SCRIPT>Date now = new Date();\u000d\u000aint year = now.getYear() + 1900;\u000d\u000aString yearStr = year.toString();\u000d\u000areturnValue(yearStr);</SCRIPT><VALUE-COLUMN>VALUE</VALUE-COLUMN><DESCRIPTION-COLUMN>VALUE</DESCRIPTION-COLUMN><VISIBLE-COLUMNS>VALUE</VISIBLE-COLUMNS><INVISIBLE-COLUMNS></INVISIBLE-COLUMNS></SCRIPTLOV>',38,NULL,'Current year')
INSERT INTO SBI_LOV VALUES(102,'Current month format mm/yyyy','CURRENT_MONTH','SCRIPT',NULL,'<SCRIPTLOV><SCRIPT>Date now = new Date();\u000d\u000aint month = now.getMonth() + 1;\u000d\u000aString monthStr = month.toString();\u000d\u000aif (month < 10) monthStr = ''0'' + monthStr;\u000d\u000aint year = now.getYear() + 1900;\u000d\u000aString toReturn = monthStr + ''/'' + year.toString();\u000d\u000areturnValue(toReturn);</SCRIPT><VALUE-COLUMN>VALUE</VALUE-COLUMN><DESCRIPTION-COLUMN>VALUE</DESCRIPTION-COLUMN><VISIBLE-COLUMNS>VALUE</VISIBLE-COLUMNS><INVISIBLE-COLUMNS></INVISIBLE-COLUMNS></SCRIPTLOV>',38,NULL,'Current month')
INSERT INTO SBI_LOV VALUES(103,'Current date format dd/mm/yyyy','CURRENT_DATE','SCRIPT',NULL,'<SCRIPTLOV><SCRIPT>Date now = new Date();\u000d\u000aint day = now.getDate();\u000d\u000aString dayStr = day.toString();\u000d\u000aif (day < 10) dayStr = ''0'' + dayStr;\u000d\u000aint month = now.getMonth() + 1;\u000d\u000aString monthStr = month.toString();\u000d\u000aif (month < 10) monthStr = ''0'' + monthStr;\u000d\u000aint year = now.getYear() + 1900;\u000d\u000aString toReturn = dayStr + ''/'' + monthStr + ''/'' + year.toString();\u000d\u000areturnValue(toReturn);</SCRIPT><VALUE-COLUMN>VALUE</VALUE-COLUMN><DESCRIPTION-COLUMN>VALUE</DESCRIPTION-COLUMN><VISIBLE-COLUMNS>VALUE</VISIBLE-COLUMNS><INVISIBLE-COLUMNS></INVISIBLE-COLUMNS></SCRIPTLOV>',38,NULL,'Current date')
INSERT INTO QRTZ_LOCKS VALUES('CALENDAR_ACCESS')
INSERT INTO QRTZ_LOCKS VALUES('JOB_ACCESS')
INSERT INTO QRTZ_LOCKS VALUES('MISFIRE_ACCESS')
INSERT INTO QRTZ_LOCKS VALUES('STATE_ACCESS')
INSERT INTO QRTZ_LOCKS VALUES('TRIGGER_ACCESS')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(1,'EnginesManagement','EnginesManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(2,'FunctionalitiesManagement','FunctionalitiesManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(3,'LovsManagement','LovsManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(4,'ConstraintManagement','ConstraintManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(5,'ParameterManagement','ParameterManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(6,'DocumentAdministration','DocumentAdministration')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(7,'DocumentDevManagement','DocumentDevManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(8,'DocumentTestManagement','DocumentTestManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(9,'DocumentAdminManagement','DocumentAdminManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(10,'ImportExportManagement','ImportExportManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(11,'SchedulerManagement','SchedulerManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(12,'EventsManagement','EventsManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(13,'WorkspaceManagement','WorkspaceManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(14,'WorklistManagement','WorklistManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(15,'MapCatalogueManagement','MapCatalogueManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(16,'DocumentManagement','DocumentManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(17,'SyncronizeRolesManagement','SyncronizeRolesManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(18,'ProfileAttributeManagement','ProfileAttributeManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(19,'DataSourceManagement','DataSourceManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(20,'DocumentUserManagement','DocumentUserManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(21,'DocumentDeleteManagement','DocumentDeleteManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(22,'DocumentStateManagement','DocumentStateManagement')
INSERT INTO SBI_USER_FUNCTIONALITY VALUES(23,'DocumentDetailManagement','DocumentDetailManagement')
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,1)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,2)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,3)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,4)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,5)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,6)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,7)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,8)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,9)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,10)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,11)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,12)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,13)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,14)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,15)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,16)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,17)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,18)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,19)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,20)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,21)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,22)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(51,23)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,3)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,4)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,5)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,7)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,12)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,13)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,14)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,15)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,16)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,18)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,21)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,23)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(114,19)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(115,8)
INSERT INTO SBI_ROLE_TYPE_USER_FUNCTIONALITY VALUES(50,20)
