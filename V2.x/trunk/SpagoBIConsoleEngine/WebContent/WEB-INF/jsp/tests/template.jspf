<script language="javascript" type="text/javascript">

Sbi.template = {


	// --------------------------------------------------------------------------------
	// DATASETS
	// --------------------------------------------------------------------------------
	datasets: [
        {
            id: 'testConsoleChart'
            , label: 'testConsoleChart'
        }, {
            id: 'testConsLiveLine'
            , label: 'testConsLiveLine'
            , refreshTime: 5
        }, {
            id: 'testConsole'
            , label: 'testConsole'
            , refreshTime: 30
        } 
	]
	
	
	// --------------------------------------------------------------------------------
	// SUMMARY PANEL
	// --------------------------------------------------------------------------------
	, summaryPanel: {
    
	    // layout properties
	    collassable: true
	    , collapsed: false
	    , hidden: false
    

    	// ogni dataset può avere più grafici associati (1..N)
    	, charts: [
        {
        	dataset: 'testStore'
            , widgetConfig: {
            	type: 'chart.ext.line'
        		, xField: 'name'
                , yField: 'visits'
            }
         	
        }, {
        	dataset: 'testConsoleChart'
        	, widgetConfig: {
        		type: 'chart.ext.bar'
            	, xField: 'quarter'
            	, yField: 'sales'
        	}
        } , {
        	dataset: 'testConsoleChart'
        	, widgetConfig: {
        		type: 'chart.ext.pie'
        		, dataField: 'sales'
	        	, categoryField: 'quarter'
        	}
        } , {
        	dataset: 'testConsLiveLine'
            , widgetConfig: {
            	type: 'chart.sbi.multileds'
            	, title:'Multileds'
            	, fields: [
            		{header: 'Effort Idx',name:'EffortIndex', rangeMaxValue: 100, secondIntervalUb: 66, firstIntervalUb: 10, rangeMinValue: 0}, 
            		{header: 'Compet.',name:'Competitiveness', rangeMaxValue: 100, secondIntervalUb: 66, firstIntervalUb: 33, rangeMinValue: 0}, 
            		{header: 'Cost Opt.',name:'CostOptimization', rangeMaxValue: 100, secondIntervalUb: 66, firstIntervalUb: 33, rangeMinValue: 0},
            		{header: 'Health',name:'Health', rangeMaxValue: 100, secondIntervalUb: 66, firstIntervalUb: 33, rangeMinValue: 0}
            	]
           	}
        } ,  {
        	dataset: 'testConsLiveLine'
            , widgetConfig: {
            	type: 'chart.sbi.livelines'
            	, title:'Liveline'
                , rangeMinValue: 0
        		, rangeMaxValue: 120 
        		, stepY: 40
        		, domainValueNumber: 18
            }
        } ,  {
        	dataset: 'testConsLiveLine'
            , widgetConfig: {
               	type: 'chart.sbi.speedometer'
               	, paramWidth: 100
            	, paramHeight: 100
            	, minValue: 0
            	, maxValue: 100
            	, lowValue: 33
            	, highValue: 66
            	, field: 'EffortIndex'
            }
        }
    	]
    
	}	

	//--------------------------------------------------------------------------------
	// DETAIL PANEL
	// -------------------------------------------------------------------------------
	, detailPanel: {
    	pages: [
    		
			//--------------------------------------------------------------------------------
			// Page 1
			// -------------------------------------------------------------------------------
    		{
			title: 'Pag. 1'
			, msg: 'Io sono la PRIMA pagina'

			// -- Navigation bar -------------------------------------------------------------
			, navigationBar: {
				documents: [
				{
					text: 'Bottone 1'
					,tooltip: 'Bottone 1'
					,label: 'QBE_FOODMART'
					,staticParams: {param1: 'paramValue'}
				}, {
					text: 'Bottone 2'
					,tooltip: 'Bottone 2'
					,label: 'QBE_FOODMART'
				}, {
					text: 'Bottone 3'
					,tooltip: 'Bottone 3'
					,label: 'QBE_FOODMART'
				}
				]
			}
	
            , table: {
	            dataset: 'testConsole'
	          , columnId: 'ID' //the column ID of the single row
	            // -- Filter bar -----------------------------------------------------------------
	    	    , filterBar: {
	    	    	type: 'custom'  
	    	        , defaults: {
	    	        	operator: 'EQUALS_TO'
	    	            , operand: 'DISTINCT'
	    	        }     
	    	
	    	        , filters: [{
	    	        	text: 'Brands'
	    	            , column: 'brandname'
	    	            , operator: 'EQUALS_TO'
	    	            , operand: 'DISTINCT'
	    	        }, {
	    	        	text: 'Products'
	    	            , column: 'productName'
	    	            , operator: 'EQUALS_TO'
	    	            , operand: 'DISTINCT'
	    	        }]

	    	        , actions: [{
	    	            name: 'refresh'
		    	        , tooltip: 'Refresh console data'
	    	            , hidden: false
	    	            , config: {}
    	            }, {
        	            name: 'errors'
		    	        , tooltipActive:  'Mark all errors as not viewed'	
			    	    , tooltipInactive: 	 'Mark all errors as viewed'    	   
		    	        , checkColumn: 'errors_check'	//the column on db that defines if the icon was checked	
						, flagColumn: 'errors_flag'		//the column on db that defines if the icon was visible	
	    	            , hidden: false
	    	            , config: {
	    	            	staticParams: {
							//generic params for the execution of query on generic db
							   stmt: 'UPDATE_ALL_ERRORS_STATE'
							 , numPars: '2'			//the number of params in the query							     																																 													    			     									
							}
						  , dynamicParams: [{
							 'errors_check': 'errors_check'  
							, scope: 'env'
							},{
							 'userId': 'userId'  
							, scope: 'env'
							}]
						 , metaParams: {queryParams: [{"name":"errors_check","type":"num"},{"name":"userId","type":"string"}]}
    	            	}
	    	        }, {
	    	            name: 'alarms'
	    	        	, tooltipActive:'Mark all allarms as not viewed'  
			    	    , tooltipInactive:'Mark all allarms as viewed'  	    	   
		    	        , checkColumn: 'alarms_check'	//the column on db that defines if the icon was checked	
						, flagColumn: 'alarms_flag'		//the column on db that defines if the icon was visible	
	    	            , hidden: false
	    	            , config: {
	    	            	staticParams: {
							//generic params for the execution of query on generic db							 							
							   stmt: 'UPDATE_ALL_ALARMS_STATE'
							 , numPars: '2'			//the number of params in the query																																	 													    			     									
							}
						  , dynamicParams: [{
							 'alarms_check': 'alarms_check'  //value: label in new request
							, scope: 'env'
							},{
							 'userId': 'userId'  
							, scope: 'env'
							}]
						 , metaParams: {queryParams: [{"name":"alarms_check","type":"num"},{"name":"userId","type":"string"}]}
    	            	}	    	            
	    	        }, {
                       name: 'views'
                   	    , tooltipActive: 'Mark all rows as viewed'    
   			    	    , tooltipInactive: 	'Mark all rows as not viewed'		   
   		    	        , checkColumn: 'views_check'	//the column on db that defines if the icon was checked	   						
   	    	            , hidden: false
   	    	            , config: {
   	    	            	staticParams: {
   							//generic params for the execution of query on generic db
							   stmt: 'UPDATE_ALL_VIEWING_STATE'
   							 , numPars: '2'			//the number of params in the query																																	 													    			     									
   							}
   						  , dynamicParams: [{
   							 'views_check': 'views_check'  //param value: label in new request
   							, scope: 'env'
   							},{
   							 'userId': 'userId'  
   							, scope: 'env'
   							}]
   						 , metaParams: {queryParams: [{"name":"views_check","type":"num"},{"name":"userId","type":"string"}]}
       	            	}	 	                   
	    	        },{ name: 'monitor'
		    	        ,  hidden: false
		    	        ,  tooltip: 'View all active'
		    	        ,  checkColumn: 'monitor_check'	//the column on db with the flag value	    	        
	    	        },{ name: 'monitor_inactive'
		    	    	,  hidden: false
		    	        ,  tooltip: 'View all inactive'	
		    	        ,  checkColumn: 'monitor_check'	//the column on db with the flag value	 	    	        
		    	    }
	    	        ]
	    	    } //filterBar   
	    	     
		        , inlineCharts: [
						{ 
								type: 'bar'
								, column: 'chart_store_cost'
								, color: 'gray'
								, totValue: 500 
							}, { 
								type: 'point'
								, column: 'chart_unit_sales'
								, color: 'red'
								, threshold: '25'
								, tooltip: 'superata la soglia di 25 errori'
							}
		            	]
			
		            	, inlineActions: [
							{
								name: 'start'
								, hidden: false
								, tooltip: 'Start the process'
								, config: {}
							}, {
								name: 'stop'
								, hidden: false
								, tooltip: 'Stop the process'
								, config: {
									params: {}
								}
							}, {
								name: 'errors'
								, hidden: false
								, checkColumn: 'errors_check'
								, flagColumn: 'errors_flag'
								, tooltipActive: 'View unchecked error messages'
							    , tooltipInactive: 'View checked error messages'
							    , config: {staticParams: {
									//generic params for the execution of query on generic db
									   stmt: 'UPDATE_ERROR_STATE'
									 , numPars: '2'			//the number of params in the query													 														 													    			     									
									}
								  , dynamicParams: [{
									 'errors_check': 'errors_check'  //value: logical name
									, scope: 'dataset'
									},{ID: 'id'  					   //value: logical name
									, scope: 'dataset'
									}]
								 , metaParams: {queryParams: [{"name":"errors_check","type":"num"},{"name":"id","type":"num"}]}
								}
							}, {
								name: 'alarms'
								, hidden: false
								, checkColumn: 'alarms_check'
								, flagColumn: 'alarms_flag'
								, tooltipActive: 'View unchecked alarm messages'
								, tooltipInactive: 'View checked alarm messages'
								, config: {staticParams: {
									//generic params for the execution of query on generic db
									   stmt: 'UPDATE_ALARM_STATE'
									 , numPars: '2'			//the number of params in the query													 														 													    			     									
									}
								  , dynamicParams: [{
									 'alarms_check': 'alarms_check'  //value: logical name
									, scope: 'dataset'
									},{ID: 'id'  					   //value: logical name
									, scope: 'dataset'
									}]
								 , metaParams: {queryParams: [{"name":"alarms_check","type":"num"},{"name":"id","type":"num"}]}
								}
							}, {
								name: 'informationlog'
								, hidden: false
								, flagColumn: 'errors_flag'
								, tooltip: 'Download log files'
								, config: {}
							}, { 
								name: 'crossnav'
								, hidden: false
								, tooltip: 'Cross on XXX document'
								, config: {
									target: 'new'
									 , document: 
								 	 {
										label: 'testReportParams'
										, staticParams: {P4: 'paramValue_AA' , P5: 'paramValue_BB'} 
										, dynamicParams: [{
											brandname: 'P1' 
											, scope: 'dataset'   
										},{
											productName: 'P2'
											, scope: 'dataset'
										},{
											month: 'P3'
											, scope: 'env'
										}]	 
									}
								}
							}, { 
								name: 'crossnav'
								, hidden: false
								, tooltip: 'Cross on YYY document (popup)'
								, config: {
									target: 'self' 
									, document: 
									{
										label: 'testReportParams'
										, staticParams: {P3:'paramValue_A' , P5: 'paramValue_B'} 
										, dynamicParams: [{
											brandname: 'P1' 
											, scope: 'dataset'  
										},{
											productName: 'P2'
											, scope: 'dataset'
										},{
											month: 'P4'
											, scope: 'env'
										}]	 
									}
								}
							},{
								name: 'monitor'
								, hidden: false							
							 	, tooltipActive: 'Disable monitoring'	
						        , tooltipInactive: 'Enable monitoring' 						    
								, checkColumn: 'monitor_check'								
								, config: {staticParams: {
											//generic params for the execution of query on generic db
											    stmt: 'UPDATE_MONITOR_STATE'
											 , numPars: '2'			//the number of params in the query													 														 													    			     									
											}
										  , dynamicParams: [{
											 'monitor_check': 'monitor_check'  //value: logical name
											, scope: 'dataset'
											},{ID: 'id'  					   //value: logical name
											, scope: 'dataset'
											}]
										, metaParams: {queryParams: [{"name":"monitor_check","type":"num"},{"name":"id","type":"num"}]}
									}
							},{
								name: 'views'
								, hidden: false
								, checkColumn: 'views_check'
	      		                , tooltipActive: 'Checked. Click to uncheck'
		  						, tooltipInactive: 'Unchecked. Click to check'
		  							, config: {staticParams: {
									//generic params for the execution of query on generic db
									   stmt: 'UPDATE_CHECK_STATE'
									 , numPars: '2'			//the number of params in the query													 														 													    			     									
									}
								  , dynamicParams: [{
									 'views_check': 'views_check'  //value: logical name
									, scope: 'dataset'
									},{ID: 'id'  					//value: logical name
									, scope: 'dataset'
									}]
								, metaParams: {queryParams: [{"name":"views_check","type":"num"},{"name":"id","type":"num"}]}
							}
							}
						]  
	        }//table	    	
		}
		] //pages
	}	//detailPanel
} //template


</script>
