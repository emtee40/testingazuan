/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package it.eng.spagobi.meta.model.business.provider;

import it.eng.spagobi.meta.model.business.util.BusinessModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BusinessModelItemProviderAdapterFactory extends BusinessModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BusinessModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessModelItemProvider businessModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessModelAdapter() {
		if (businessModelItemProvider == null) {
			businessModelItemProvider = new BusinessModelItemProvider(this);
		}

		return businessModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessTableItemProvider businessTableItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessTableAdapter() {
		if (businessTableItemProvider == null) {
			businessTableItemProvider = new BusinessTableItemProvider(this);
		}

		return businessTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessColumnItemProvider businessColumnItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessColumnAdapter() {
		if (businessColumnItemProvider == null) {
			businessColumnItemProvider = new BusinessColumnItemProvider(this);
		}

		return businessColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRelationshipItemProvider businessRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRelationshipAdapter() {
		if (businessRelationshipItemProvider == null) {
			businessRelationshipItemProvider = new BusinessRelationshipItemProvider(this);
		}

		return businessRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessViewItemProvider businessViewItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessViewAdapter() {
		if (businessViewItemProvider == null) {
			businessViewItemProvider = new BusinessViewItemProvider(this);
		}

		return businessViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessDomainItemProvider businessDomainItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessDomainAdapter() {
		if (businessDomainItemProvider == null) {
			businessDomainItemProvider = new BusinessDomainItemProvider(this);
		}

		return businessDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.eng.spagobi.meta.model.business.BusinessIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessIdentifierItemProvider businessIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link it.eng.spagobi.meta.model.business.BusinessIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessIdentifierAdapter() {
		if (businessIdentifierItemProvider == null) {
			businessIdentifierItemProvider = new BusinessIdentifierItemProvider(this);
		}

		return businessIdentifierItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (businessModelItemProvider != null) businessModelItemProvider.dispose();
		if (businessTableItemProvider != null) businessTableItemProvider.dispose();
		if (businessColumnItemProvider != null) businessColumnItemProvider.dispose();
		if (businessRelationshipItemProvider != null) businessRelationshipItemProvider.dispose();
		if (businessViewItemProvider != null) businessViewItemProvider.dispose();
		if (businessDomainItemProvider != null) businessDomainItemProvider.dispose();
		if (businessIdentifierItemProvider != null) businessIdentifierItemProvider.dispose();
	}

}
